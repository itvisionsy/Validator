<?xml version="1.0" encoding="utf-8"?>
<project title="API Documentation" version="v2.8.1">
  <partials/>
  <file path="StringValidatorRule.php" generated-path="StringValidatorRule.html" hash="f09549050853cb40529335f1ddb2575c" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="ItvisionSy\Validator" line="10" package="Default">
      <extends>\ItvisionSy\Validator\ValidatorRule</extends>
      <name>StringValidatorRule</name>
      <full_name>\ItvisionSy\Validator\StringValidatorRule</full_name>
      <docblock line="10">
        <description>Description of StringValidatorRule</description>
        <long-description>It provides a skeleton and minimize the work needed by other classes.
Inherited rules will just have to implement the _validator, preferrably override the $args protected array.</long-description>
        <tag name="author" line="10" description="Muhannad Shelleh" link="mailto:muhannad.shelleh@itvision-sy.com"/>
        <tag name="package" line="10" description="Default"/>
        <tag name="inherited_from" description="\ItvisionSy\Validator\ValidatorRule" refers="\ItvisionSy\Validator\ValidatorRule" link="/classes/ItvisionSy.Validator.ValidatorRule.html"/>
      </docblock>
      <constant namespace="ItvisionSy\Validator" line="15" package="Default">
        <name>VALUE_IS_NOT_PROVIDED_AT_ALL</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::VALUE_IS_NOT_PROVIDED_AT_ALL</full_name>
        <value>"ItvisionSy\\Validator\\Validator\\CONST::VALUE_IS_NOT_PROVIDED_AT_ALL"</value>
        <docblock line="15">
          <description></description>
          <long-description></long-description>
        </docblock>
      </constant>
      <property static="false" visibility="protected" namespace="ItvisionSy\Validator" line="25" package="Default">
        <name>$parameters</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::parameters</full_name>
        <default>array()</default>
        <docblock line="25">
          <description>The parameters to be used for validation. They will be passed when instantiation of the rule object.</description>
          <long-description>Parameters can be accessed using their 0-based index: i.e. $this-&gt;_0 gets the first parameters.

If $args is also defined, the same parameters can be accessed using the opposite value in the $args array.</long-description>
          <tag name="var" line="25" description="" type="array&lt;mixed,mixed&gt;" variable="">
            <type>array&lt;mixed,mixed&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ItvisionSy\Validator" line="31" package="Default">
        <name>$args</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::args</full_name>
        <default>array()</default>
        <docblock line="31">
          <description>Providing this array as a simple strings list allows named access to parameters instead of 0-based index.</description>
          <long-description>i.e. suppose $args=['min','max'] and $parameters=[15,99], using $this-&gt;min return 15 and $this-&gt;max returns 99</long-description>
          <tag name="var" line="31" description="" type="array&lt;mixed,string&gt;" variable="">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ItvisionSy\Validator" line="37" package="Default">
        <name>$ignoreNotProvided</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::ignoreNotProvided</full_name>
        <default>true</default>
        <docblock line="37">
          <description>If true, the validator will be run even against not provided values, which will be mentioned as the string in the constant VALUE_IS_NOT_PROVIDED_AT_ALL</description>
          <long-description></long-description>
          <tag name="var" line="37" description="" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ItvisionSy\Validator" line="12" package="Default">
        <name>_validate</name>
        <full_name>\ItvisionSy\Validator\StringValidatorRule::_validate()</full_name>
        <docblock line="12">
          <description>The actual validation logic of the class</description>
          <long-description></long-description>
          <tag name="inherited_from" description="\ItvisionSy\Validator\ValidatorRule::_validate()" refers="\ItvisionSy\Validator\ValidatorRule::_validate()" link="/classes/ItvisionSy.Validator.ValidatorRule.html#method__validate"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ItvisionSy\Validator" line="44" package="Default">
        <name>make</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::make()</full_name>
        <docblock line="44">
          <description>Return an instance of ValidatorRule</description>
          <long-description></long-description>
          <tag name="param" line="44" description="&lt;p&gt;a map of values for the ValidatorRule to use in validation. Any key/value pair will be available as a direct attribute.&lt;/p&gt;" type="array" variable="$parameters">
            <type>array</type>
          </tag>
          <tag name="return" line="44" description="" type="\ItvisionSy\Validator\ValidatorRule">
            <type>\ItvisionSy\Validator\ValidatorRule</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parameters</name>
          <default>null</default>
          <type>array</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ItvisionSy\Validator" line="58" package="Default">
        <name>quick</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::quick()</full_name>
        <docblock line="58">
          <description>Quickly instantiate a ValidatorRule and runs it against a value</description>
          <long-description>It is a shorthand for rule::make($parameters)-&gt;validate($value);</long-description>
          <tag name="param" line="58" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="param" line="58" description="&lt;p&gt;a map of values for the ValidatorRule to use in validation. Any key/value pair will be available as a direct attribute.&lt;/p&gt;" type="array" variable="$parameters">
            <type>array</type>
          </tag>
          <tag name="param" line="58" description="&lt;p&gt;A reference variable to take the ValidatorRule back&lt;/p&gt;" type="null" variable="$ValidatorRule">
            <type>null</type>
          </tag>
          <tag name="return" line="58" description="TRUE if validation succeeded, string or array of errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$parameters</name>
          <default>null</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$validatorRule</name>
          <default>null</default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="67" package="Default">
        <name>__construct</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::__construct()</full_name>
        <docblock line="67">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="67" description="&lt;p&gt;a map of values for the ValidatorRule to use in validation. Any key/value pair will be available as a direct attribute.&lt;/p&gt;" type="array" variable="$parameters">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parameters</name>
          <default>null</default>
          <type>array</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="78" package="Default">
        <name>setParameters</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::setParameters()</full_name>
        <docblock line="78">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="78" description="" type="array" variable="$parameters">
            <type>array</type>
          </tag>
          <tag name="return" line="78" description="" type="\ItvisionSy\Validator\ValidatorRule">
            <type>\ItvisionSy\Validator\ValidatorRule</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parameters</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ItvisionSy\Validator" line="88" package="Default">
        <name>_validate</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::_validate()</full_name>
        <docblock line="88">
          <description>The actual validation logic of the class</description>
          <long-description></long-description>
          <tag name="param" line="88" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="88" description="TRUE if validation succeeded, string error or array of string errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ItvisionSy\Validator" line="94" package="Default">
        <name>preRules</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::preRules()</full_name>
        <docblock line="94">
          <description>Returns a ValidatorRule[] which will be validated before validating this rule</description>
          <long-description></long-description>
          <tag name="return" line="94" description="" type="\ItvisionSy\Validator\ValidatorRule|array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;">
            <type>\ItvisionSy\Validator\ValidatorRule</type>
            <type>array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ItvisionSy\Validator" line="102" package="Default">
        <name>postRules</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::postRules()</full_name>
        <docblock line="102">
          <description>Returns a ValidatorRule[] which will be validated after successfully validating this rule</description>
          <long-description></long-description>
          <tag name="return" line="102" description="" type="\ItvisionSy\Validator\ValidatorRule|array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;">
            <type>\ItvisionSy\Validator\ValidatorRule</type>
            <type>array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="111" package="Default">
        <name>validate</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::validate()</full_name>
        <docblock line="111">
          <description>Validates a value against the rule</description>
          <long-description></long-description>
          <tag name="param" line="111" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="111" description="TRUE if validation succeeded, string or array of errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="130" package="Default">
        <name>preValidate</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::preValidate()</full_name>
        <docblock line="130">
          <description>Executes the pre validation rules and returns.</description>
          <long-description></long-description>
          <tag name="param" line="130" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="130" description="TRUE if validation succeeded, string or array of errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="146" package="Default">
        <name>postValidate</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::postValidate()</full_name>
        <docblock line="146">
          <description>Executes the post validation rules</description>
          <long-description></long-description>
          <tag name="param" line="146" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="146" description="TRUE if validation succeeded, string or array of errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="157" package="Default">
        <name>__get</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::__get()</full_name>
        <docblock line="157">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="168" package="Default">
        <name>offsetExists</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::offsetExists()</full_name>
        <docblock line="168">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="172" package="Default">
        <name>offsetGet</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::offsetGet()</full_name>
        <docblock line="172">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="176" package="Default">
        <name>offsetSet</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::offsetSet()</full_name>
        <docblock line="176">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="180" package="Default">
        <name>offsetUnset</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::offsetUnset()</full_name>
        <docblock line="180">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="12" code="PPC:ERR-50015">Argument $value is missing from the Docblock of _validate</error>
      <error line="12" code="PPC:ERR-50008">No summary for method ""</error>
    </parse_markers>
    <source>eJxtjkFLAzEUhO/vVwzFgy7Y3m2xPXjx4MWFnoQSk1cTyCYhLykW6X833V0FwTkNwzdv3mabbCIKamBJSjOey8mJi6E/v+2Vd0aVmNdEq64jdHhi0dml0gDEI/qSXfj45V6r50ZdwZ2qxcaMl2pVCMqgt+w9W2yGOVnKlOzcvHgv56WOw2Orr0h7JfLfffBn4WAEf9MvIjSlHAvrwgbHGvT45uE0gXx701zlu8ZiVuZSc4CTg4xLP8gWD1jsrxZiY/UG7wyFCVqsx/6F6ELfxolrlQ==</source>
  </file>
  <file path="MaxValidatorRule.php" generated-path="MaxValidatorRule.html" hash="9f012439bed08a5b6c5a0696842a3a91" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="ItvisionSy\Validator" line="10" package="Default">
      <extends>\ItvisionSy\Validator\ValidatorRule</extends>
      <name>MaxValidatorRule</name>
      <full_name>\ItvisionSy\Validator\MaxValidatorRule</full_name>
      <docblock line="10">
        <description>Description of MaxValidatorRule</description>
        <long-description>It provides a skeleton and minimize the work needed by other classes.
Inherited rules will just have to implement the _validator, preferrably override the $args protected array.</long-description>
        <tag name="author" line="10" description="Muhannad Shelleh" link="mailto:muhannad.shelleh@itvision-sy.com"/>
        <tag name="package" line="10" description="Default"/>
        <tag name="inherited_from" description="\ItvisionSy\Validator\ValidatorRule" refers="\ItvisionSy\Validator\ValidatorRule" link="/classes/ItvisionSy.Validator.ValidatorRule.html"/>
      </docblock>
      <constant namespace="ItvisionSy\Validator" line="15" package="Default">
        <name>VALUE_IS_NOT_PROVIDED_AT_ALL</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::VALUE_IS_NOT_PROVIDED_AT_ALL</full_name>
        <value>"ItvisionSy\\Validator\\Validator\\CONST::VALUE_IS_NOT_PROVIDED_AT_ALL"</value>
        <docblock line="15">
          <description></description>
          <long-description></long-description>
        </docblock>
      </constant>
      <property static="false" visibility="protected" namespace="ItvisionSy\Validator" line="12" package="Default">
        <name>$args</name>
        <full_name>\ItvisionSy\Validator\MaxValidatorRule::args</full_name>
        <default>array('max')</default>
        <docblock line="12">
          <description>Providing this array as a simple strings list allows named access to parameters instead of 0-based index.</description>
          <long-description>i.e. suppose $args=['min','max'] and $parameters=[15,99], using $this-&gt;min return 15 and $this-&gt;max returns 99</long-description>
          <tag name="inherited_from" description="\ItvisionSy\Validator\ValidatorRule::args" refers="\ItvisionSy\Validator\ValidatorRule::args" link="/classes/ItvisionSy.Validator.ValidatorRule.html#property_args"/>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ItvisionSy\Validator" line="25" package="Default">
        <name>$parameters</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::parameters</full_name>
        <default>array()</default>
        <docblock line="25">
          <description>The parameters to be used for validation. They will be passed when instantiation of the rule object.</description>
          <long-description>Parameters can be accessed using their 0-based index: i.e. $this-&gt;_0 gets the first parameters.

If $args is also defined, the same parameters can be accessed using the opposite value in the $args array.</long-description>
          <tag name="var" line="25" description="" type="array&lt;mixed,mixed&gt;" variable="">
            <type>array&lt;mixed,mixed&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ItvisionSy\Validator" line="31" package="Default">
        <name>$args</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::args</full_name>
        <default>array()</default>
        <docblock line="31">
          <description>Providing this array as a simple strings list allows named access to parameters instead of 0-based index.</description>
          <long-description>i.e. suppose $args=['min','max'] and $parameters=[15,99], using $this-&gt;min return 15 and $this-&gt;max returns 99</long-description>
          <tag name="var" line="31" description="" type="array&lt;mixed,string&gt;" variable="">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ItvisionSy\Validator" line="37" package="Default">
        <name>$ignoreNotProvided</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::ignoreNotProvided</full_name>
        <default>true</default>
        <docblock line="37">
          <description>If true, the validator will be run even against not provided values, which will be mentioned as the string in the constant VALUE_IS_NOT_PROVIDED_AT_ALL</description>
          <long-description></long-description>
          <tag name="var" line="37" description="" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ItvisionSy\Validator" line="14" package="Default">
        <name>_validate</name>
        <full_name>\ItvisionSy\Validator\MaxValidatorRule::_validate()</full_name>
        <docblock line="14">
          <description>The actual validation logic of the class</description>
          <long-description></long-description>
          <tag name="inherited_from" description="\ItvisionSy\Validator\ValidatorRule::_validate()" refers="\ItvisionSy\Validator\ValidatorRule::_validate()" link="/classes/ItvisionSy.Validator.ValidatorRule.html#method__validate"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ItvisionSy\Validator" line="44" package="Default">
        <name>make</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::make()</full_name>
        <docblock line="44">
          <description>Return an instance of ValidatorRule</description>
          <long-description></long-description>
          <tag name="param" line="44" description="&lt;p&gt;a map of values for the ValidatorRule to use in validation. Any key/value pair will be available as a direct attribute.&lt;/p&gt;" type="array" variable="$parameters">
            <type>array</type>
          </tag>
          <tag name="return" line="44" description="" type="\ItvisionSy\Validator\ValidatorRule">
            <type>\ItvisionSy\Validator\ValidatorRule</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parameters</name>
          <default>null</default>
          <type>array</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ItvisionSy\Validator" line="58" package="Default">
        <name>quick</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::quick()</full_name>
        <docblock line="58">
          <description>Quickly instantiate a ValidatorRule and runs it against a value</description>
          <long-description>It is a shorthand for rule::make($parameters)-&gt;validate($value);</long-description>
          <tag name="param" line="58" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="param" line="58" description="&lt;p&gt;a map of values for the ValidatorRule to use in validation. Any key/value pair will be available as a direct attribute.&lt;/p&gt;" type="array" variable="$parameters">
            <type>array</type>
          </tag>
          <tag name="param" line="58" description="&lt;p&gt;A reference variable to take the ValidatorRule back&lt;/p&gt;" type="null" variable="$ValidatorRule">
            <type>null</type>
          </tag>
          <tag name="return" line="58" description="TRUE if validation succeeded, string or array of errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$parameters</name>
          <default>null</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$validatorRule</name>
          <default>null</default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="67" package="Default">
        <name>__construct</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::__construct()</full_name>
        <docblock line="67">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="67" description="&lt;p&gt;a map of values for the ValidatorRule to use in validation. Any key/value pair will be available as a direct attribute.&lt;/p&gt;" type="array" variable="$parameters">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parameters</name>
          <default>null</default>
          <type>array</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="78" package="Default">
        <name>setParameters</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::setParameters()</full_name>
        <docblock line="78">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="78" description="" type="array" variable="$parameters">
            <type>array</type>
          </tag>
          <tag name="return" line="78" description="" type="\ItvisionSy\Validator\ValidatorRule">
            <type>\ItvisionSy\Validator\ValidatorRule</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parameters</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ItvisionSy\Validator" line="88" package="Default">
        <name>_validate</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::_validate()</full_name>
        <docblock line="88">
          <description>The actual validation logic of the class</description>
          <long-description></long-description>
          <tag name="param" line="88" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="88" description="TRUE if validation succeeded, string error or array of string errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ItvisionSy\Validator" line="94" package="Default">
        <name>preRules</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::preRules()</full_name>
        <docblock line="94">
          <description>Returns a ValidatorRule[] which will be validated before validating this rule</description>
          <long-description></long-description>
          <tag name="return" line="94" description="" type="\ItvisionSy\Validator\ValidatorRule|array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;">
            <type>\ItvisionSy\Validator\ValidatorRule</type>
            <type>array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ItvisionSy\Validator" line="102" package="Default">
        <name>postRules</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::postRules()</full_name>
        <docblock line="102">
          <description>Returns a ValidatorRule[] which will be validated after successfully validating this rule</description>
          <long-description></long-description>
          <tag name="return" line="102" description="" type="\ItvisionSy\Validator\ValidatorRule|array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;">
            <type>\ItvisionSy\Validator\ValidatorRule</type>
            <type>array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="111" package="Default">
        <name>validate</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::validate()</full_name>
        <docblock line="111">
          <description>Validates a value against the rule</description>
          <long-description></long-description>
          <tag name="param" line="111" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="111" description="TRUE if validation succeeded, string or array of errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="130" package="Default">
        <name>preValidate</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::preValidate()</full_name>
        <docblock line="130">
          <description>Executes the pre validation rules and returns.</description>
          <long-description></long-description>
          <tag name="param" line="130" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="130" description="TRUE if validation succeeded, string or array of errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="146" package="Default">
        <name>postValidate</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::postValidate()</full_name>
        <docblock line="146">
          <description>Executes the post validation rules</description>
          <long-description></long-description>
          <tag name="param" line="146" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="146" description="TRUE if validation succeeded, string or array of errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="157" package="Default">
        <name>__get</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::__get()</full_name>
        <docblock line="157">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="168" package="Default">
        <name>offsetExists</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::offsetExists()</full_name>
        <docblock line="168">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="172" package="Default">
        <name>offsetGet</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::offsetGet()</full_name>
        <docblock line="172">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="176" package="Default">
        <name>offsetSet</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::offsetSet()</full_name>
        <docblock line="176">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="180" package="Default">
        <name>offsetUnset</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::offsetUnset()</full_name>
        <docblock line="180">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="14" code="PPC:ERR-50015">Argument $value is missing from the Docblock of _validate</error>
      <error line="14" code="PPC:ERR-50008">No summary for method ""</error>
      <error line="12" code="PPC:ERR-50007">No summary for property $args</error>
    </parse_markers>
    <source>eJyFkT1vAjEMhvf8CgshQZGAvXwOXTqwFImlrVCaMyRSLrnGDgJV/Pea3pWPVlU9JJH9xO+beDyrbKVU0CVSpQ3CI+8cuRiWh5eV9q7QHNNIqWGvp6AHD0gmuYoFgLiBhd6foafsUZATNdeZbUywyFaHoAtYWvQeLYzLJjOgOjN3jVyfDgMTy6lcHyrjNdGv5oB7xlAQ3GY/lAKJKkVGw1hAW6ctwQSeO6Xed15HP+ubHMzXA9a7uhF223LKeCe9oAm3ga6jdcglJme+gWviFAk5pwDEyWM4dxlPoM3WUX8qBmZwD63VqQDCbNkC2Zh9AW9i/YIdQTPI3hqdBY6AnrAxIhIubP/xUVf/1L8I43vWHjiCDMmj/DXLWG7sXPtQ9aqO6hOE07EW</source>
  </file>
  <file path="ValidatorItem.php" generated-path="ValidatorItem.html" hash="9c4ac33c79af6f3f71a60cb6d936db9d" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="ItvisionSy\Validator" line="21" package="Default">
      <extends/>
      <name>ValidatorItem</name>
      <full_name>\ItvisionSy\Validator\ValidatorItem</full_name>
      <docblock line="21">
        <description>The item validation class.</description>
        <long-description>It is the core class that handles evaluating a single value against multiple rules and getting a list of errors, if any.</long-description>
        <tag name="author" line="21" description="Muhannad Shelleh" link="mailto:muhannad.shelleh@itvision-sy.com"/>
        <tag name="package" line="21" description="Default"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ItvisionSy\Validator" line="23" package="Default">
        <name>$value</name>
        <full_name>\ItvisionSy\Validator\ValidatorItem::value</full_name>
        <default></default>
        <docblock line="23">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ItvisionSy\Validator" line="24" package="Default">
        <name>$rules</name>
        <full_name>\ItvisionSy\Validator\ValidatorItem::rules</full_name>
        <default>array()</default>
        <docblock line="24">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ItvisionSy\Validator" line="25" package="Default">
        <name>$errors</name>
        <full_name>\ItvisionSy\Validator\ValidatorItem::errors</full_name>
        <default>array()</default>
        <docblock line="25">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ItvisionSy\Validator" line="33" package="Default">
        <name>make</name>
        <full_name>\ItvisionSy\Validator\ValidatorItem::make()</full_name>
        <docblock line="33">
          <description>Instantiates a new ValidatorItem object</description>
          <long-description></long-description>
          <tag name="param" line="33" description="&lt;p&gt;The value to be tested against the rules&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="param" line="33" description="&lt;p&gt;The rules for the value to be tested against&lt;/p&gt;" type="array&lt;mixed,string&gt;|string|\ItvisionSy\Validator\ValidatorRule|array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;" variable="$rules">
            <type>array&lt;mixed,string&gt;</type>
            <type>string</type>
            <type>\ItvisionSy\Validator\ValidatorRule</type>
            <type>array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;</type>
          </tag>
          <tag name="return" line="33" description="" type="\ItvisionSy\Validator\ValidatorItem">
            <type>\ItvisionSy\Validator\ValidatorItem</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$rules</name>
          <default>null</default>
          <type>array&lt;mixed,string&gt;|string|\ItvisionSy\Validator\ValidatorRule|array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ItvisionSy\Validator" line="44" package="Default">
        <name>quick</name>
        <full_name>\ItvisionSy\Validator\ValidatorItem::quick()</full_name>
        <docblock line="44">
          <description>Instantiates a new ValidatorItem object and evaludates it</description>
          <long-description></long-description>
          <tag name="param" line="44" description="&lt;p&gt;The value to be tested against the rules&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="param" line="44" description="&lt;p&gt;The rules for the value to be tested against&lt;/p&gt;" type="array&lt;mixed,string&gt;|string|\ItvisionSy\Validator\ValidatorRule|array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;" variable="$rules">
            <type>array&lt;mixed,string&gt;</type>
            <type>string</type>
            <type>\ItvisionSy\Validator\ValidatorRule</type>
            <type>array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;</type>
          </tag>
          <tag name="param" line="44" description="&lt;p&gt;a reference value to take the validatorItem object back&lt;/p&gt;" type="null" variable="$validatorItem">
            <type>null</type>
          </tag>
          <tag name="return" line="44" description="TRUE if the validator succeeded, array of errors otherwise" type="boolean|array">
            <type>boolean</type>
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$rules</name>
          <default></default>
          <type>array&lt;mixed,string&gt;|string|\ItvisionSy\Validator\ValidatorRule|array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$validatorItem</name>
          <default>null</default>
          <type>null</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="54" package="Default">
        <name>__construct</name>
        <full_name>\ItvisionSy\Validator\ValidatorItem::__construct()</full_name>
        <docblock line="54">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="54" description="&lt;p&gt;The value to be tested against the rules&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="param" line="54" description="&lt;p&gt;The rules for the value to be tested against&lt;/p&gt;" type="array&lt;mixed,string&gt;|string|\ItvisionSy\Validator\ValidatorRule|array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;" variable="$rules">
            <type>array&lt;mixed,string&gt;</type>
            <type>string</type>
            <type>\ItvisionSy\Validator\ValidatorRule</type>
            <type>array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$rules</name>
          <default>null</default>
          <type>array&lt;mixed,string&gt;|string|\ItvisionSy\Validator\ValidatorRule|array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="65" package="Default">
        <name>validate</name>
        <full_name>\ItvisionSy\Validator\ValidatorItem::validate()</full_name>
        <docblock line="65">
          <description>Validates the value against the rules</description>
          <long-description></long-description>
          <tag name="return" line="65" description="TRUE if the validation succeeded, FALSE otherwise." type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="86" package="Default">
        <name>resetRules</name>
        <full_name>\ItvisionSy\Validator\ValidatorItem::resetRules()</full_name>
        <docblock line="86">
          <description>Resets the rules to empty set, or optionally to a new set of rules.</description>
          <long-description></long-description>
          <tag name="param" line="86" description="&lt;p&gt;The rules for the value to be tested against&lt;/p&gt;" type="array&lt;mixed,string&gt;|string|\ItvisionSy\Validator\ValidatorRule|array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;" variable="$rules">
            <type>array&lt;mixed,string&gt;</type>
            <type>string</type>
            <type>\ItvisionSy\Validator\ValidatorRule</type>
            <type>array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;</type>
          </tag>
          <tag name="return" line="86" description="" type="\ItvisionSy\Validator\ValidatorItem">
            <type>\ItvisionSy\Validator\ValidatorItem</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$rules</name>
          <default>null</default>
          <type>array&lt;mixed,string&gt;|string|\ItvisionSy\Validator\ValidatorRule|array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="100" package="Default">
        <name>setRules</name>
        <full_name>\ItvisionSy\Validator\ValidatorItem::setRules()</full_name>
        <docblock line="100">
          <description>Sets the rules for the value to be tested against</description>
          <long-description></long-description>
          <tag name="param" line="100" description="&lt;p&gt;The rules for the value to be tested against&lt;/p&gt;" type="array&lt;mixed,string&gt;|string|\ItvisionSy\Validator\ValidatorRule|array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;" variable="$rules">
            <type>array&lt;mixed,string&gt;</type>
            <type>string</type>
            <type>\ItvisionSy\Validator\ValidatorRule</type>
            <type>array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;</type>
          </tag>
          <tag name="return" line="100" description="" type="\ItvisionSy\Validator\ValidatorItem">
            <type>\ItvisionSy\Validator\ValidatorItem</type>
          </tag>
          <tag name="throws" line="100" description="" type="\BadMethodCallException">
            <type>\BadMethodCallException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$rules</name>
          <default></default>
          <type>array&lt;mixed,string&gt;|string|\ItvisionSy\Validator\ValidatorRule|array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="136" package="Default">
        <name>__call</name>
        <full_name>\ItvisionSy\Validator\ValidatorItem::__call()</full_name>
        <docblock line="136">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$arguments</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="155" package="Default">
        <name>__get</name>
        <full_name>\ItvisionSy\Validator\ValidatorItem::__get()</full_name>
        <docblock line="155">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" static="false" visibility="public" line="21">
        <name>value</name>
        <docblock>
          <description>Gets the value to be tested</description>
          <long-description/>
          <tag name="magic" line="21"/>
          <tag name="return" line="21" type="">
            <type/>
          </tag>
          <tag name="method" line="21" description="Gets the value to be tested" method_name="value"/>
        </docblock>
      </method>
      <method final="false" static="false" visibility="public" line="21">
        <name>value</name>
        <docblock>
          <description>Sets the value to be tested</description>
          <long-description/>
          <tag name="magic" line="21"/>
          <tag name="return" line="21" type="">
            <type/>
          </tag>
          <tag name="method" line="21" description="Sets the value to be tested" method_name="value"/>
        </docblock>
      </method>
      <method final="false" static="false" visibility="public" line="21">
        <name/>
        <docblock>
          <description>ValidatorRule[] rules() Gets the rules for the value to be tested against</description>
          <long-description/>
          <tag name="magic" line="21"/>
          <tag name="return" line="21" type="">
            <type/>
          </tag>
          <tag name="method" line="21" description="ValidatorRule[] rules() Gets the rules for the value to be tested against" method_name=""/>
        </docblock>
      </method>
      <method final="false" static="false" visibility="public" line="21">
        <name>rules</name>
        <docblock>
          <description>Sets the rules for the value to be tested against</description>
          <long-description/>
          <tag name="magic" line="21"/>
          <tag name="return" line="21" type="">
            <type/>
          </tag>
          <tag name="method" line="21" description="Sets the rules for the value to be tested against" method_name="rules"/>
        </docblock>
      </method>
      <property final="false" static="false" visibility="public" line="21">
        <name>$rules</name>
        <default/>
        <docblock>
          <description>The rules for the value to be tested against</description>
          <long-description/>
          <tag name="var" description="&lt;p&gt;The rules for the value to be tested against&lt;/p&gt;" type="array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;" line="21">
            <type by_reference="false">array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;</type>
          </tag>
          <tag name="magic" line="21"/>
          <tag name="property-read" line="21" description="The rules for the value to be tested against" type="array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;" variable="$rules">
            <type>array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="21">
        <name>$value</name>
        <default/>
        <docblock>
          <description>The value to be tested</description>
          <long-description/>
          <tag name="var" description="&lt;p&gt;The value to be tested&lt;/p&gt;" type="mixed" line="21">
            <type by_reference="false">mixed</type>
          </tag>
          <tag name="magic" line="21"/>
          <tag name="property-read" line="21" description="The value to be tested" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="21">
        <name>$errors</name>
        <default/>
        <docblock>
          <description>An array of errors resulted from the last validation. If not errors then empty array</description>
          <long-description/>
          <tag name="var" description="&lt;p&gt;An array of errors resulted from the last validation. If not errors then empty array&lt;/p&gt;" type="array&lt;mixed,string&gt;" line="21">
            <type by_reference="false">array&lt;mixed,string&gt;</type>
          </tag>
          <tag name="magic" line="21"/>
          <tag name="property-read" line="21" description="An array of errors resulted from the last validation. If not errors then empty array" type="array&lt;mixed,string&gt;" variable="$errors">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
      </property>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="33" code="PPC:ERR-50015">Argument $value is missing from the Docblock of make</error>
      <error line="44" code="PPC:ERR-50015">Argument $value is missing from the Docblock of quick</error>
      <error line="54" code="PPC:ERR-50015">Argument $value is missing from the Docblock of __construct</error>
      <error line="54" code="PPC:ERR-50008">No summary for method ""</error>
      <error line="86" code="PPC:ERR-50015">Argument $rules is missing from the Docblock of resetRules</error>
      <error line="100" code="PPC:ERR-50015">Argument $rules is missing from the Docblock of setRules</error>
      <error line="136" code="PPC:ERR-50015">Argument $name is missing from the Docblock of __call</error>
      <error line="136" code="PPC:ERR-50015">Argument $arguments is missing from the Docblock of __call</error>
      <error line="136" code="PPC:ERR-50008">No summary for method ""</error>
      <error line="155" code="PPC:ERR-50015">Argument $name is missing from the Docblock of __get</error>
      <error line="155" code="PPC:ERR-50008">No summary for method ""</error>
      <error line="23" code="PPC:ERR-50007">No summary for property $value</error>
      <error line="24" code="PPC:ERR-50007">No summary for property $rules</error>
      <error line="25" code="PPC:ERR-50007">No summary for property $errors</error>
    </parse_markers>
    <source>eJzVWG1PGzkQ/p5fMUVRk1Qhbb9CQ+EQd0I6qgp6/ZJEkbOZkD327WxvadTw32/8shuvdzdAW92pK5HA2jMeP88zMzbv3mfrrNNJWIwiYwHCpfwSijBNbjbTzywKl0ym/LjTef3qVQdewac1Qigxhi9mjCZCEDEhRmpU/VxKCAVImhekHM0g/ckkrFmyjFAAkm1OpsktMBD0FaFylyOwWxYmQkKcRzLM6DXPlQHZwS1KaxGFNCNdAXKecjGEcEUTNuX6pyyX65TDVU7rJWwJN2uMIlzDu9i+GQnz5jS0Wz0Um1GQxielixjJxRLi8CsuTWj9wR8ozbZMqDKFBX2ikLh0bUrMLi1KZNvVXwO4eaaLa9r9ZGZA6A+gjMCgsqJNNjsrcGyPy7isxfUcx9p5xtMMudwccmT1wLvG36fnhlz1algwsWpfLehVrYTkJBcVhNEJnCXAOGebnXSAoyChkfMVT2MdGIlVOtIeweUKklQWBjQlAYwzuTG+aN3XHaPwKr7fOh2gh0KSGMgy/GP/rYFlDJNZbcguacb0oE5B9VCSEVQskSGTKj0gwXsvgHTxN/kppp9mjLP4KUiWKVjKwfNR4Lo1v2wrnG9/igLsehxlzhOYNhWkaWW31uS1gTBfRGFAcRKDAazyJNBFKmZ3RSIOd7gneRQNiC2wj11T4WkceCYDQ9PD9xKiS5muf0s9M/y1KTLrKRB1yM52GUG5Qo5J4DiSxEHhug7NggV3PvmLNI2QJVuTuZ+u/7pQ5b7iAkQeBIhLXA5rCZ7STH4fCnyKQv7Jw+DO43sIL72N1TVTm2AcHx01SM7qx5Fa1frwxP5JDec9HNVGzb7aRPgLa6nCTEnJfB6kNIfngXw8d7tyHQoNIC01rlRc9ZBu+pYEx8gxFCivTVv0qXpowdtuH92m3g5oVdJNYlZbdtT8+9mfNxc7DY/2QrXTjQtJpYkUb4kUZMGa4DAbt4csYaD10VG4hWIesChiiwgNOgN/ll7N9FOFvZrTdwlx0NRYAkYCH/fh5MM+b7WACzcvxmMg+dQ25YBDsh0Xy7a5ffBFVuLadTNSPZblIM0T0qwZHQCF8aYta69RVM9flCbmjEHvh0AZlGaKYiJgo8ZMd6ExVei0xeh/Stof7dGleDl6ydee3v6Jacf4D6S2Q5y2aKPqOw7KvwoxcCrXPL0XMP2NLa/0neGcFHfxNUCtvr38+fg6LNjyoTtzMeyztCtI+0tR4e+F8mhODbYcwcuXxgRCfRALkHKjgidst3QvnRvgCyvzzi9tTcuqRwOkk68Fo/7B1AQh1mkeLRU9zBRmOthTTV+FCVGlZxCT1AOKYFUmT12uHLKmlW0ceKWvquG9sm8tmqYYW6JcgOpMdUkw2fkagztKwTDOonSJ/V7PnrzmMcv6hSjK22UzmOqxIs2DVciF7PfN2gPbuht2qqMdAn61C89pZTKac8wiFmB/0jvszYag3xc7GHh+ulkqREh03+QLVUhKZ1tlVO7Ps1Lo2Jru2g/gBN42bdGtJi4RFeN9XazL+G0eYyLdGA+ODp4WY2ncGmCFyd38yZtZHfbmWIYqlp3h29mTe7zrbjLbi4Ii8VxfsMd0GvxwdnVx8/Hs/GI+hxEcTKffdtt4qOaJR7rTPGzDV1k4dhaw53VfLeYUQgR+VBUcJXLhwnvcnEVucRK76iRay1NL4/ICFi3LVStYU9o+yZtn9eR6J5yCh6E6r6p/7Olkhp6asC0/erbymZvaRL0alh8zNVhUwfYaOJkdPK+DN1wraBv9rvqnp6thFzZxH0rdktQkH8+AEVg9XaV6R40tqikP37TVwuLMSEHNc4F8riK1LXOit0M1jST4WS84q4Tc0A7a8s7H6PDk1vr0VV/FtXgW1KXvjhuA0Br4L4HQxfQnA2EK9PcA8bBfa+S7rqIfkFc1cu+W2xLizmsbV1WvXnl41Ku55zzq1r8stfgtAX3o/AssAGCH</source>
  </file>
  <file path="NotInValidatorRule.php" generated-path="NotInValidatorRule.html" hash="47af7fe29c6bfc8a194839b998da1300" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="ItvisionSy\Validator" line="10" package="Default">
      <extends>\ItvisionSy\Validator\ValidatorRule</extends>
      <name>NotInValidatorRule</name>
      <full_name>\ItvisionSy\Validator\NotInValidatorRule</full_name>
      <docblock line="10">
        <description>Description of NotInValidatorRule</description>
        <long-description>It provides a skeleton and minimize the work needed by other classes.
Inherited rules will just have to implement the _validator, preferrably override the $args protected array.</long-description>
        <tag name="author" line="10" description="Muhannad Shelleh" link="mailto:muhannad.shelleh@itvision-sy.com"/>
        <tag name="package" line="10" description="Default"/>
        <tag name="inherited_from" description="\ItvisionSy\Validator\ValidatorRule" refers="\ItvisionSy\Validator\ValidatorRule" link="/classes/ItvisionSy.Validator.ValidatorRule.html"/>
      </docblock>
      <constant namespace="ItvisionSy\Validator" line="15" package="Default">
        <name>VALUE_IS_NOT_PROVIDED_AT_ALL</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::VALUE_IS_NOT_PROVIDED_AT_ALL</full_name>
        <value>"ItvisionSy\\Validator\\Validator\\CONST::VALUE_IS_NOT_PROVIDED_AT_ALL"</value>
        <docblock line="15">
          <description></description>
          <long-description></long-description>
        </docblock>
      </constant>
      <property static="false" visibility="protected" namespace="ItvisionSy\Validator" line="25" package="Default">
        <name>$parameters</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::parameters</full_name>
        <default>array()</default>
        <docblock line="25">
          <description>The parameters to be used for validation. They will be passed when instantiation of the rule object.</description>
          <long-description>Parameters can be accessed using their 0-based index: i.e. $this-&gt;_0 gets the first parameters.

If $args is also defined, the same parameters can be accessed using the opposite value in the $args array.</long-description>
          <tag name="var" line="25" description="" type="array&lt;mixed,mixed&gt;" variable="">
            <type>array&lt;mixed,mixed&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ItvisionSy\Validator" line="31" package="Default">
        <name>$args</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::args</full_name>
        <default>array()</default>
        <docblock line="31">
          <description>Providing this array as a simple strings list allows named access to parameters instead of 0-based index.</description>
          <long-description>i.e. suppose $args=['min','max'] and $parameters=[15,99], using $this-&gt;min return 15 and $this-&gt;max returns 99</long-description>
          <tag name="var" line="31" description="" type="array&lt;mixed,string&gt;" variable="">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ItvisionSy\Validator" line="37" package="Default">
        <name>$ignoreNotProvided</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::ignoreNotProvided</full_name>
        <default>true</default>
        <docblock line="37">
          <description>If true, the validator will be run even against not provided values, which will be mentioned as the string in the constant VALUE_IS_NOT_PROVIDED_AT_ALL</description>
          <long-description></long-description>
          <tag name="var" line="37" description="" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ItvisionSy\Validator" line="12" package="Default">
        <name>_validate</name>
        <full_name>\ItvisionSy\Validator\NotInValidatorRule::_validate()</full_name>
        <docblock line="12">
          <description>The actual validation logic of the class</description>
          <long-description></long-description>
          <tag name="inherited_from" description="\ItvisionSy\Validator\ValidatorRule::_validate()" refers="\ItvisionSy\Validator\ValidatorRule::_validate()" link="/classes/ItvisionSy.Validator.ValidatorRule.html#method__validate"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ItvisionSy\Validator" line="44" package="Default">
        <name>make</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::make()</full_name>
        <docblock line="44">
          <description>Return an instance of ValidatorRule</description>
          <long-description></long-description>
          <tag name="param" line="44" description="&lt;p&gt;a map of values for the ValidatorRule to use in validation. Any key/value pair will be available as a direct attribute.&lt;/p&gt;" type="array" variable="$parameters">
            <type>array</type>
          </tag>
          <tag name="return" line="44" description="" type="\ItvisionSy\Validator\ValidatorRule">
            <type>\ItvisionSy\Validator\ValidatorRule</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parameters</name>
          <default>null</default>
          <type>array</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ItvisionSy\Validator" line="58" package="Default">
        <name>quick</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::quick()</full_name>
        <docblock line="58">
          <description>Quickly instantiate a ValidatorRule and runs it against a value</description>
          <long-description>It is a shorthand for rule::make($parameters)-&gt;validate($value);</long-description>
          <tag name="param" line="58" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="param" line="58" description="&lt;p&gt;a map of values for the ValidatorRule to use in validation. Any key/value pair will be available as a direct attribute.&lt;/p&gt;" type="array" variable="$parameters">
            <type>array</type>
          </tag>
          <tag name="param" line="58" description="&lt;p&gt;A reference variable to take the ValidatorRule back&lt;/p&gt;" type="null" variable="$ValidatorRule">
            <type>null</type>
          </tag>
          <tag name="return" line="58" description="TRUE if validation succeeded, string or array of errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$parameters</name>
          <default>null</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$validatorRule</name>
          <default>null</default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="67" package="Default">
        <name>__construct</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::__construct()</full_name>
        <docblock line="67">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="67" description="&lt;p&gt;a map of values for the ValidatorRule to use in validation. Any key/value pair will be available as a direct attribute.&lt;/p&gt;" type="array" variable="$parameters">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parameters</name>
          <default>null</default>
          <type>array</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="78" package="Default">
        <name>setParameters</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::setParameters()</full_name>
        <docblock line="78">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="78" description="" type="array" variable="$parameters">
            <type>array</type>
          </tag>
          <tag name="return" line="78" description="" type="\ItvisionSy\Validator\ValidatorRule">
            <type>\ItvisionSy\Validator\ValidatorRule</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parameters</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ItvisionSy\Validator" line="88" package="Default">
        <name>_validate</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::_validate()</full_name>
        <docblock line="88">
          <description>The actual validation logic of the class</description>
          <long-description></long-description>
          <tag name="param" line="88" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="88" description="TRUE if validation succeeded, string error or array of string errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ItvisionSy\Validator" line="94" package="Default">
        <name>preRules</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::preRules()</full_name>
        <docblock line="94">
          <description>Returns a ValidatorRule[] which will be validated before validating this rule</description>
          <long-description></long-description>
          <tag name="return" line="94" description="" type="\ItvisionSy\Validator\ValidatorRule|array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;">
            <type>\ItvisionSy\Validator\ValidatorRule</type>
            <type>array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ItvisionSy\Validator" line="102" package="Default">
        <name>postRules</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::postRules()</full_name>
        <docblock line="102">
          <description>Returns a ValidatorRule[] which will be validated after successfully validating this rule</description>
          <long-description></long-description>
          <tag name="return" line="102" description="" type="\ItvisionSy\Validator\ValidatorRule|array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;">
            <type>\ItvisionSy\Validator\ValidatorRule</type>
            <type>array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="111" package="Default">
        <name>validate</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::validate()</full_name>
        <docblock line="111">
          <description>Validates a value against the rule</description>
          <long-description></long-description>
          <tag name="param" line="111" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="111" description="TRUE if validation succeeded, string or array of errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="130" package="Default">
        <name>preValidate</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::preValidate()</full_name>
        <docblock line="130">
          <description>Executes the pre validation rules and returns.</description>
          <long-description></long-description>
          <tag name="param" line="130" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="130" description="TRUE if validation succeeded, string or array of errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="146" package="Default">
        <name>postValidate</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::postValidate()</full_name>
        <docblock line="146">
          <description>Executes the post validation rules</description>
          <long-description></long-description>
          <tag name="param" line="146" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="146" description="TRUE if validation succeeded, string or array of errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="157" package="Default">
        <name>__get</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::__get()</full_name>
        <docblock line="157">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="168" package="Default">
        <name>offsetExists</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::offsetExists()</full_name>
        <docblock line="168">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="172" package="Default">
        <name>offsetGet</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::offsetGet()</full_name>
        <docblock line="172">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="176" package="Default">
        <name>offsetSet</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::offsetSet()</full_name>
        <docblock line="176">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="180" package="Default">
        <name>offsetUnset</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::offsetUnset()</full_name>
        <docblock line="180">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="12" code="PPC:ERR-50015">Argument $value is missing from the Docblock of _validate</error>
      <error line="12" code="PPC:ERR-50008">No summary for method ""</error>
    </parse_markers>
    <source>eJxtkDtrAzEQhHv9isG4sI0fffws0rhIihhcBcxGt4cEOkloJRMT/N8j20cg4K2W4dvZYVbbaKJSnjqWSJqxz2crNvjD5fNIzjaUQ1oqtZhMFCZ4ZdHJxlwBhBbvIe/9H/ZRHFfoxu2oZBMS3ooh76nBwbBzbLDqemUuD2Vn+4czucx16Db1fKG0I5En9uDvzL4R/Fd/lEKdmEJmnblBW7y+hzydHyCPhnUrPK4s+kmcS/KglOhyEqakTU9NMczGymwTKdVmMicZY71eoyUnvMULBscbBzGhuAY+ZHwxgudbK9mwMO5GUknMMbJddKHh0WCKwTPz8fKe6qrUVf0C2P+Ghg==</source>
  </file>
  <file path="DomainValidatorRule.php" generated-path="DomainValidatorRule.html" hash="ef4bd55a502227d09fb69372417283ed" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="ItvisionSy\Validator" line="10" package="Default">
      <extends>\ItvisionSy\Validator\ValidatorRule</extends>
      <name>DomainValidatorRule</name>
      <full_name>\ItvisionSy\Validator\DomainValidatorRule</full_name>
      <docblock line="10">
        <description>Description of DomainValidatorRule</description>
        <long-description>It provides a skeleton and minimize the work needed by other classes.
Inherited rules will just have to implement the _validator, preferrably override the $args protected array.</long-description>
        <tag name="author" line="10" description="Muhannad Shelleh" link="mailto:muhannad.shelleh@itvision-sy.com"/>
        <tag name="package" line="10" description="Default"/>
        <tag name="inherited_from" description="\ItvisionSy\Validator\ValidatorRule" refers="\ItvisionSy\Validator\ValidatorRule" link="/classes/ItvisionSy.Validator.ValidatorRule.html"/>
      </docblock>
      <constant namespace="ItvisionSy\Validator" line="15" package="Default">
        <name>VALUE_IS_NOT_PROVIDED_AT_ALL</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::VALUE_IS_NOT_PROVIDED_AT_ALL</full_name>
        <value>"ItvisionSy\\Validator\\Validator\\CONST::VALUE_IS_NOT_PROVIDED_AT_ALL"</value>
        <docblock line="15">
          <description></description>
          <long-description></long-description>
        </docblock>
      </constant>
      <property static="false" visibility="protected" namespace="ItvisionSy\Validator" line="12" package="Default">
        <name>$args</name>
        <full_name>\ItvisionSy\Validator\DomainValidatorRule::args</full_name>
        <default>array('domain')</default>
        <docblock line="12">
          <description>Providing this array as a simple strings list allows named access to parameters instead of 0-based index.</description>
          <long-description>i.e. suppose $args=['min','max'] and $parameters=[15,99], using $this-&gt;min return 15 and $this-&gt;max returns 99</long-description>
          <tag name="inherited_from" description="\ItvisionSy\Validator\ValidatorRule::args" refers="\ItvisionSy\Validator\ValidatorRule::args" link="/classes/ItvisionSy.Validator.ValidatorRule.html#property_args"/>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ItvisionSy\Validator" line="25" package="Default">
        <name>$parameters</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::parameters</full_name>
        <default>array()</default>
        <docblock line="25">
          <description>The parameters to be used for validation. They will be passed when instantiation of the rule object.</description>
          <long-description>Parameters can be accessed using their 0-based index: i.e. $this-&gt;_0 gets the first parameters.

If $args is also defined, the same parameters can be accessed using the opposite value in the $args array.</long-description>
          <tag name="var" line="25" description="" type="array&lt;mixed,mixed&gt;" variable="">
            <type>array&lt;mixed,mixed&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ItvisionSy\Validator" line="31" package="Default">
        <name>$args</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::args</full_name>
        <default>array()</default>
        <docblock line="31">
          <description>Providing this array as a simple strings list allows named access to parameters instead of 0-based index.</description>
          <long-description>i.e. suppose $args=['min','max'] and $parameters=[15,99], using $this-&gt;min return 15 and $this-&gt;max returns 99</long-description>
          <tag name="var" line="31" description="" type="array&lt;mixed,string&gt;" variable="">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ItvisionSy\Validator" line="37" package="Default">
        <name>$ignoreNotProvided</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::ignoreNotProvided</full_name>
        <default>true</default>
        <docblock line="37">
          <description>If true, the validator will be run even against not provided values, which will be mentioned as the string in the constant VALUE_IS_NOT_PROVIDED_AT_ALL</description>
          <long-description></long-description>
          <tag name="var" line="37" description="" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ItvisionSy\Validator" line="14" package="Default">
        <name>_validate</name>
        <full_name>\ItvisionSy\Validator\DomainValidatorRule::_validate()</full_name>
        <docblock line="14">
          <description>The actual validation logic of the class</description>
          <long-description></long-description>
          <tag name="inherited_from" description="\ItvisionSy\Validator\ValidatorRule::_validate()" refers="\ItvisionSy\Validator\ValidatorRule::_validate()" link="/classes/ItvisionSy.Validator.ValidatorRule.html#method__validate"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ItvisionSy\Validator" line="44" package="Default">
        <name>make</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::make()</full_name>
        <docblock line="44">
          <description>Return an instance of ValidatorRule</description>
          <long-description></long-description>
          <tag name="param" line="44" description="&lt;p&gt;a map of values for the ValidatorRule to use in validation. Any key/value pair will be available as a direct attribute.&lt;/p&gt;" type="array" variable="$parameters">
            <type>array</type>
          </tag>
          <tag name="return" line="44" description="" type="\ItvisionSy\Validator\ValidatorRule">
            <type>\ItvisionSy\Validator\ValidatorRule</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parameters</name>
          <default>null</default>
          <type>array</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ItvisionSy\Validator" line="58" package="Default">
        <name>quick</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::quick()</full_name>
        <docblock line="58">
          <description>Quickly instantiate a ValidatorRule and runs it against a value</description>
          <long-description>It is a shorthand for rule::make($parameters)-&gt;validate($value);</long-description>
          <tag name="param" line="58" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="param" line="58" description="&lt;p&gt;a map of values for the ValidatorRule to use in validation. Any key/value pair will be available as a direct attribute.&lt;/p&gt;" type="array" variable="$parameters">
            <type>array</type>
          </tag>
          <tag name="param" line="58" description="&lt;p&gt;A reference variable to take the ValidatorRule back&lt;/p&gt;" type="null" variable="$ValidatorRule">
            <type>null</type>
          </tag>
          <tag name="return" line="58" description="TRUE if validation succeeded, string or array of errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$parameters</name>
          <default>null</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$validatorRule</name>
          <default>null</default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="67" package="Default">
        <name>__construct</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::__construct()</full_name>
        <docblock line="67">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="67" description="&lt;p&gt;a map of values for the ValidatorRule to use in validation. Any key/value pair will be available as a direct attribute.&lt;/p&gt;" type="array" variable="$parameters">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parameters</name>
          <default>null</default>
          <type>array</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="78" package="Default">
        <name>setParameters</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::setParameters()</full_name>
        <docblock line="78">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="78" description="" type="array" variable="$parameters">
            <type>array</type>
          </tag>
          <tag name="return" line="78" description="" type="\ItvisionSy\Validator\ValidatorRule">
            <type>\ItvisionSy\Validator\ValidatorRule</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parameters</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ItvisionSy\Validator" line="88" package="Default">
        <name>_validate</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::_validate()</full_name>
        <docblock line="88">
          <description>The actual validation logic of the class</description>
          <long-description></long-description>
          <tag name="param" line="88" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="88" description="TRUE if validation succeeded, string error or array of string errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ItvisionSy\Validator" line="94" package="Default">
        <name>preRules</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::preRules()</full_name>
        <docblock line="94">
          <description>Returns a ValidatorRule[] which will be validated before validating this rule</description>
          <long-description></long-description>
          <tag name="return" line="94" description="" type="\ItvisionSy\Validator\ValidatorRule|array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;">
            <type>\ItvisionSy\Validator\ValidatorRule</type>
            <type>array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ItvisionSy\Validator" line="102" package="Default">
        <name>postRules</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::postRules()</full_name>
        <docblock line="102">
          <description>Returns a ValidatorRule[] which will be validated after successfully validating this rule</description>
          <long-description></long-description>
          <tag name="return" line="102" description="" type="\ItvisionSy\Validator\ValidatorRule|array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;">
            <type>\ItvisionSy\Validator\ValidatorRule</type>
            <type>array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="111" package="Default">
        <name>validate</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::validate()</full_name>
        <docblock line="111">
          <description>Validates a value against the rule</description>
          <long-description></long-description>
          <tag name="param" line="111" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="111" description="TRUE if validation succeeded, string or array of errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="130" package="Default">
        <name>preValidate</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::preValidate()</full_name>
        <docblock line="130">
          <description>Executes the pre validation rules and returns.</description>
          <long-description></long-description>
          <tag name="param" line="130" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="130" description="TRUE if validation succeeded, string or array of errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="146" package="Default">
        <name>postValidate</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::postValidate()</full_name>
        <docblock line="146">
          <description>Executes the post validation rules</description>
          <long-description></long-description>
          <tag name="param" line="146" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="146" description="TRUE if validation succeeded, string or array of errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="157" package="Default">
        <name>__get</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::__get()</full_name>
        <docblock line="157">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="168" package="Default">
        <name>offsetExists</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::offsetExists()</full_name>
        <docblock line="168">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="172" package="Default">
        <name>offsetGet</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::offsetGet()</full_name>
        <docblock line="172">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="176" package="Default">
        <name>offsetSet</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::offsetSet()</full_name>
        <docblock line="176">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="180" package="Default">
        <name>offsetUnset</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::offsetUnset()</full_name>
        <docblock line="180">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="14" code="PPC:ERR-50015">Argument $value is missing from the Docblock of _validate</error>
      <error line="14" code="PPC:ERR-50008">No summary for method ""</error>
      <error line="12" code="PPC:ERR-50007">No summary for property $args</error>
    </parse_markers>
    <source>eJzFkD1vwjAQhnf/ihOKlID4UNfyObB06FIkFoqQmxy1JcdOfWcEQvz3OgTagth7Q2Kfnve99zyaVqoSwsoSqZI5wgvvNGlnF4f3pTS6kOz8UIhBpyOgA3Ok3OuKIwBuC3NXSm1/uLdgMFI1OJOBlfPwGpS0VhawUGgMKhiVl06fms5MXyb26NDPXTmJ8oHIjSR65A+4Z7QFwW33KATEqrxjzBkLSKT/JBjDKi3OJul6eI9sg83Pm2x2jRdmSTwFbF/t6tJbyHIXLGe4r4wrMEtnaRcuZBsm8FTz8KeMJs6SIpRV5Jrx7RjlkX54I/TIwVtIWGnqTRoljMfjq8sUnqG1rIVQOCSwjqGUnCtghVH9FbSPi12ExxufU+t31gnQEN6lTirpuX6y+CfcBG+yhyET5YgjNmsEq7S+p+s6W5reodcVgMIHsc/O2i704tmgzW4Ctv/rMUTzFSfxDWam71c=</source>
  </file>
  <file path="RequiredValidatorRule.php" generated-path="RequiredValidatorRule.html" hash="92f753ba5a50bb24b96cc34da5edb9bc" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="ItvisionSy\Validator" line="10" package="Default">
      <extends>\ItvisionSy\Validator\ValidatorRule</extends>
      <name>RequiredValidatorRule</name>
      <full_name>\ItvisionSy\Validator\RequiredValidatorRule</full_name>
      <docblock line="10">
        <description>Description of RequiredValidatorRule</description>
        <long-description>It provides a skeleton and minimize the work needed by other classes.
Inherited rules will just have to implement the _validator, preferrably override the $args protected array.</long-description>
        <tag name="author" line="10" description="Muhannad Shelleh" link="mailto:muhannad.shelleh@itvision-sy.com"/>
        <tag name="package" line="10" description="Default"/>
        <tag name="inherited_from" description="\ItvisionSy\Validator\ValidatorRule" refers="\ItvisionSy\Validator\ValidatorRule" link="/classes/ItvisionSy.Validator.ValidatorRule.html"/>
      </docblock>
      <constant namespace="ItvisionSy\Validator" line="15" package="Default">
        <name>VALUE_IS_NOT_PROVIDED_AT_ALL</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::VALUE_IS_NOT_PROVIDED_AT_ALL</full_name>
        <value>"ItvisionSy\\Validator\\Validator\\CONST::VALUE_IS_NOT_PROVIDED_AT_ALL"</value>
        <docblock line="15">
          <description></description>
          <long-description></long-description>
        </docblock>
      </constant>
      <property static="false" visibility="protected" namespace="ItvisionSy\Validator" line="12" package="Default">
        <name>$ignoreNotProvided</name>
        <full_name>\ItvisionSy\Validator\RequiredValidatorRule::ignoreNotProvided</full_name>
        <default>false</default>
        <docblock line="12">
          <description>If true, the validator will be run even against not provided values, which will be mentioned as the string in the constant VALUE_IS_NOT_PROVIDED_AT_ALL</description>
          <long-description></long-description>
          <tag name="inherited_from" description="\ItvisionSy\Validator\ValidatorRule::ignoreNotProvided" refers="\ItvisionSy\Validator\ValidatorRule::ignoreNotProvided" link="/classes/ItvisionSy.Validator.ValidatorRule.html#property_ignoreNotProvided"/>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ItvisionSy\Validator" line="25" package="Default">
        <name>$parameters</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::parameters</full_name>
        <default>array()</default>
        <docblock line="25">
          <description>The parameters to be used for validation. They will be passed when instantiation of the rule object.</description>
          <long-description>Parameters can be accessed using their 0-based index: i.e. $this-&gt;_0 gets the first parameters.

If $args is also defined, the same parameters can be accessed using the opposite value in the $args array.</long-description>
          <tag name="var" line="25" description="" type="array&lt;mixed,mixed&gt;" variable="">
            <type>array&lt;mixed,mixed&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ItvisionSy\Validator" line="31" package="Default">
        <name>$args</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::args</full_name>
        <default>array()</default>
        <docblock line="31">
          <description>Providing this array as a simple strings list allows named access to parameters instead of 0-based index.</description>
          <long-description>i.e. suppose $args=['min','max'] and $parameters=[15,99], using $this-&gt;min return 15 and $this-&gt;max returns 99</long-description>
          <tag name="var" line="31" description="" type="array&lt;mixed,string&gt;" variable="">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ItvisionSy\Validator" line="37" package="Default">
        <name>$ignoreNotProvided</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::ignoreNotProvided</full_name>
        <default>true</default>
        <docblock line="37">
          <description>If true, the validator will be run even against not provided values, which will be mentioned as the string in the constant VALUE_IS_NOT_PROVIDED_AT_ALL</description>
          <long-description></long-description>
          <tag name="var" line="37" description="" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ItvisionSy\Validator" line="14" package="Default">
        <name>_validate</name>
        <full_name>\ItvisionSy\Validator\RequiredValidatorRule::_validate()</full_name>
        <docblock line="14">
          <description>The actual validation logic of the class</description>
          <long-description></long-description>
          <tag name="inherited_from" description="\ItvisionSy\Validator\ValidatorRule::_validate()" refers="\ItvisionSy\Validator\ValidatorRule::_validate()" link="/classes/ItvisionSy.Validator.ValidatorRule.html#method__validate"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ItvisionSy\Validator" line="44" package="Default">
        <name>make</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::make()</full_name>
        <docblock line="44">
          <description>Return an instance of ValidatorRule</description>
          <long-description></long-description>
          <tag name="param" line="44" description="&lt;p&gt;a map of values for the ValidatorRule to use in validation. Any key/value pair will be available as a direct attribute.&lt;/p&gt;" type="array" variable="$parameters">
            <type>array</type>
          </tag>
          <tag name="return" line="44" description="" type="\ItvisionSy\Validator\ValidatorRule">
            <type>\ItvisionSy\Validator\ValidatorRule</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parameters</name>
          <default>null</default>
          <type>array</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ItvisionSy\Validator" line="58" package="Default">
        <name>quick</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::quick()</full_name>
        <docblock line="58">
          <description>Quickly instantiate a ValidatorRule and runs it against a value</description>
          <long-description>It is a shorthand for rule::make($parameters)-&gt;validate($value);</long-description>
          <tag name="param" line="58" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="param" line="58" description="&lt;p&gt;a map of values for the ValidatorRule to use in validation. Any key/value pair will be available as a direct attribute.&lt;/p&gt;" type="array" variable="$parameters">
            <type>array</type>
          </tag>
          <tag name="param" line="58" description="&lt;p&gt;A reference variable to take the ValidatorRule back&lt;/p&gt;" type="null" variable="$ValidatorRule">
            <type>null</type>
          </tag>
          <tag name="return" line="58" description="TRUE if validation succeeded, string or array of errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$parameters</name>
          <default>null</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$validatorRule</name>
          <default>null</default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="67" package="Default">
        <name>__construct</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::__construct()</full_name>
        <docblock line="67">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="67" description="&lt;p&gt;a map of values for the ValidatorRule to use in validation. Any key/value pair will be available as a direct attribute.&lt;/p&gt;" type="array" variable="$parameters">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parameters</name>
          <default>null</default>
          <type>array</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="78" package="Default">
        <name>setParameters</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::setParameters()</full_name>
        <docblock line="78">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="78" description="" type="array" variable="$parameters">
            <type>array</type>
          </tag>
          <tag name="return" line="78" description="" type="\ItvisionSy\Validator\ValidatorRule">
            <type>\ItvisionSy\Validator\ValidatorRule</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parameters</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ItvisionSy\Validator" line="88" package="Default">
        <name>_validate</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::_validate()</full_name>
        <docblock line="88">
          <description>The actual validation logic of the class</description>
          <long-description></long-description>
          <tag name="param" line="88" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="88" description="TRUE if validation succeeded, string error or array of string errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ItvisionSy\Validator" line="94" package="Default">
        <name>preRules</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::preRules()</full_name>
        <docblock line="94">
          <description>Returns a ValidatorRule[] which will be validated before validating this rule</description>
          <long-description></long-description>
          <tag name="return" line="94" description="" type="\ItvisionSy\Validator\ValidatorRule|array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;">
            <type>\ItvisionSy\Validator\ValidatorRule</type>
            <type>array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ItvisionSy\Validator" line="102" package="Default">
        <name>postRules</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::postRules()</full_name>
        <docblock line="102">
          <description>Returns a ValidatorRule[] which will be validated after successfully validating this rule</description>
          <long-description></long-description>
          <tag name="return" line="102" description="" type="\ItvisionSy\Validator\ValidatorRule|array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;">
            <type>\ItvisionSy\Validator\ValidatorRule</type>
            <type>array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="111" package="Default">
        <name>validate</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::validate()</full_name>
        <docblock line="111">
          <description>Validates a value against the rule</description>
          <long-description></long-description>
          <tag name="param" line="111" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="111" description="TRUE if validation succeeded, string or array of errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="130" package="Default">
        <name>preValidate</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::preValidate()</full_name>
        <docblock line="130">
          <description>Executes the pre validation rules and returns.</description>
          <long-description></long-description>
          <tag name="param" line="130" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="130" description="TRUE if validation succeeded, string or array of errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="146" package="Default">
        <name>postValidate</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::postValidate()</full_name>
        <docblock line="146">
          <description>Executes the post validation rules</description>
          <long-description></long-description>
          <tag name="param" line="146" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="146" description="TRUE if validation succeeded, string or array of errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="157" package="Default">
        <name>__get</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::__get()</full_name>
        <docblock line="157">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="168" package="Default">
        <name>offsetExists</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::offsetExists()</full_name>
        <docblock line="168">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="172" package="Default">
        <name>offsetGet</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::offsetGet()</full_name>
        <docblock line="172">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="176" package="Default">
        <name>offsetSet</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::offsetSet()</full_name>
        <docblock line="176">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="180" package="Default">
        <name>offsetUnset</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::offsetUnset()</full_name>
        <docblock line="180">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="14" code="PPC:ERR-50015">Argument $value is missing from the Docblock of _validate</error>
      <error line="14" code="PPC:ERR-50008">No summary for method ""</error>
      <error line="12" code="PPC:ERR-50007">No summary for property $ignoreNotProvided</error>
    </parse_markers>
    <source>eJxtj09rg0AQxe/7KaYhh1ZocjdJE0EPgk2CGk8FWdaxLuiu3T/SUPLdu1EpBDqHYXjzmze87b5vekIE7VD3lCHEZuCaS5FdPwra8ooaqTaErD2PgAchaqZ4bxwAsoYUvyxXWP2RqW3RcXf0QK1ppIJ321AhaAVZg22LDWy7WVnpSTnw+eervq6Y7N7c+Zqwlmr9/wfAb4Oi0vCo/hBwNbZeSYPMYAVL/imkwqM0ZyUHXjlpBzVtNbpUj2htBRuTlcPki89LN1l8ma3vpdBYJWBawNNuB9pQw5nvF0Fyico4K4+nvDynpyIOo7AM8jJIEthDnl4i8GFRjIdcO6cp2mIzmt8IuZFfYlaDkw==</source>
  </file>
  <file path="InValidatorRule.php" generated-path="InValidatorRule.html" hash="bf48f0392161c817447e832fe3012002" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="ItvisionSy\Validator" line="10" package="Default">
      <extends>\ItvisionSy\Validator\ValidatorRule</extends>
      <name>InValidatorRule</name>
      <full_name>\ItvisionSy\Validator\InValidatorRule</full_name>
      <docblock line="10">
        <description>Description of InValidatorRule</description>
        <long-description>It provides a skeleton and minimize the work needed by other classes.
Inherited rules will just have to implement the _validator, preferrably override the $args protected array.</long-description>
        <tag name="author" line="10" description="Muhannad Shelleh" link="mailto:muhannad.shelleh@itvision-sy.com"/>
        <tag name="package" line="10" description="Default"/>
        <tag name="inherited_from" description="\ItvisionSy\Validator\ValidatorRule" refers="\ItvisionSy\Validator\ValidatorRule" link="/classes/ItvisionSy.Validator.ValidatorRule.html"/>
      </docblock>
      <constant namespace="ItvisionSy\Validator" line="15" package="Default">
        <name>VALUE_IS_NOT_PROVIDED_AT_ALL</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::VALUE_IS_NOT_PROVIDED_AT_ALL</full_name>
        <value>"ItvisionSy\\Validator\\Validator\\CONST::VALUE_IS_NOT_PROVIDED_AT_ALL"</value>
        <docblock line="15">
          <description></description>
          <long-description></long-description>
        </docblock>
      </constant>
      <property static="false" visibility="protected" namespace="ItvisionSy\Validator" line="25" package="Default">
        <name>$parameters</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::parameters</full_name>
        <default>array()</default>
        <docblock line="25">
          <description>The parameters to be used for validation. They will be passed when instantiation of the rule object.</description>
          <long-description>Parameters can be accessed using their 0-based index: i.e. $this-&gt;_0 gets the first parameters.

If $args is also defined, the same parameters can be accessed using the opposite value in the $args array.</long-description>
          <tag name="var" line="25" description="" type="array&lt;mixed,mixed&gt;" variable="">
            <type>array&lt;mixed,mixed&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ItvisionSy\Validator" line="31" package="Default">
        <name>$args</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::args</full_name>
        <default>array()</default>
        <docblock line="31">
          <description>Providing this array as a simple strings list allows named access to parameters instead of 0-based index.</description>
          <long-description>i.e. suppose $args=['min','max'] and $parameters=[15,99], using $this-&gt;min return 15 and $this-&gt;max returns 99</long-description>
          <tag name="var" line="31" description="" type="array&lt;mixed,string&gt;" variable="">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ItvisionSy\Validator" line="37" package="Default">
        <name>$ignoreNotProvided</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::ignoreNotProvided</full_name>
        <default>true</default>
        <docblock line="37">
          <description>If true, the validator will be run even against not provided values, which will be mentioned as the string in the constant VALUE_IS_NOT_PROVIDED_AT_ALL</description>
          <long-description></long-description>
          <tag name="var" line="37" description="" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ItvisionSy\Validator" line="12" package="Default">
        <name>_validate</name>
        <full_name>\ItvisionSy\Validator\InValidatorRule::_validate()</full_name>
        <docblock line="12">
          <description>The actual validation logic of the class</description>
          <long-description></long-description>
          <tag name="inherited_from" description="\ItvisionSy\Validator\ValidatorRule::_validate()" refers="\ItvisionSy\Validator\ValidatorRule::_validate()" link="/classes/ItvisionSy.Validator.ValidatorRule.html#method__validate"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ItvisionSy\Validator" line="44" package="Default">
        <name>make</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::make()</full_name>
        <docblock line="44">
          <description>Return an instance of ValidatorRule</description>
          <long-description></long-description>
          <tag name="param" line="44" description="&lt;p&gt;a map of values for the ValidatorRule to use in validation. Any key/value pair will be available as a direct attribute.&lt;/p&gt;" type="array" variable="$parameters">
            <type>array</type>
          </tag>
          <tag name="return" line="44" description="" type="\ItvisionSy\Validator\ValidatorRule">
            <type>\ItvisionSy\Validator\ValidatorRule</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parameters</name>
          <default>null</default>
          <type>array</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ItvisionSy\Validator" line="58" package="Default">
        <name>quick</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::quick()</full_name>
        <docblock line="58">
          <description>Quickly instantiate a ValidatorRule and runs it against a value</description>
          <long-description>It is a shorthand for rule::make($parameters)-&gt;validate($value);</long-description>
          <tag name="param" line="58" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="param" line="58" description="&lt;p&gt;a map of values for the ValidatorRule to use in validation. Any key/value pair will be available as a direct attribute.&lt;/p&gt;" type="array" variable="$parameters">
            <type>array</type>
          </tag>
          <tag name="param" line="58" description="&lt;p&gt;A reference variable to take the ValidatorRule back&lt;/p&gt;" type="null" variable="$ValidatorRule">
            <type>null</type>
          </tag>
          <tag name="return" line="58" description="TRUE if validation succeeded, string or array of errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$parameters</name>
          <default>null</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$validatorRule</name>
          <default>null</default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="67" package="Default">
        <name>__construct</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::__construct()</full_name>
        <docblock line="67">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="67" description="&lt;p&gt;a map of values for the ValidatorRule to use in validation. Any key/value pair will be available as a direct attribute.&lt;/p&gt;" type="array" variable="$parameters">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parameters</name>
          <default>null</default>
          <type>array</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="78" package="Default">
        <name>setParameters</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::setParameters()</full_name>
        <docblock line="78">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="78" description="" type="array" variable="$parameters">
            <type>array</type>
          </tag>
          <tag name="return" line="78" description="" type="\ItvisionSy\Validator\ValidatorRule">
            <type>\ItvisionSy\Validator\ValidatorRule</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parameters</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ItvisionSy\Validator" line="88" package="Default">
        <name>_validate</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::_validate()</full_name>
        <docblock line="88">
          <description>The actual validation logic of the class</description>
          <long-description></long-description>
          <tag name="param" line="88" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="88" description="TRUE if validation succeeded, string error or array of string errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ItvisionSy\Validator" line="94" package="Default">
        <name>preRules</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::preRules()</full_name>
        <docblock line="94">
          <description>Returns a ValidatorRule[] which will be validated before validating this rule</description>
          <long-description></long-description>
          <tag name="return" line="94" description="" type="\ItvisionSy\Validator\ValidatorRule|array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;">
            <type>\ItvisionSy\Validator\ValidatorRule</type>
            <type>array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ItvisionSy\Validator" line="102" package="Default">
        <name>postRules</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::postRules()</full_name>
        <docblock line="102">
          <description>Returns a ValidatorRule[] which will be validated after successfully validating this rule</description>
          <long-description></long-description>
          <tag name="return" line="102" description="" type="\ItvisionSy\Validator\ValidatorRule|array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;">
            <type>\ItvisionSy\Validator\ValidatorRule</type>
            <type>array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="111" package="Default">
        <name>validate</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::validate()</full_name>
        <docblock line="111">
          <description>Validates a value against the rule</description>
          <long-description></long-description>
          <tag name="param" line="111" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="111" description="TRUE if validation succeeded, string or array of errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="130" package="Default">
        <name>preValidate</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::preValidate()</full_name>
        <docblock line="130">
          <description>Executes the pre validation rules and returns.</description>
          <long-description></long-description>
          <tag name="param" line="130" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="130" description="TRUE if validation succeeded, string or array of errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="146" package="Default">
        <name>postValidate</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::postValidate()</full_name>
        <docblock line="146">
          <description>Executes the post validation rules</description>
          <long-description></long-description>
          <tag name="param" line="146" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="146" description="TRUE if validation succeeded, string or array of errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="157" package="Default">
        <name>__get</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::__get()</full_name>
        <docblock line="157">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="168" package="Default">
        <name>offsetExists</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::offsetExists()</full_name>
        <docblock line="168">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="172" package="Default">
        <name>offsetGet</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::offsetGet()</full_name>
        <docblock line="172">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="176" package="Default">
        <name>offsetSet</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::offsetSet()</full_name>
        <docblock line="176">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="180" package="Default">
        <name>offsetUnset</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::offsetUnset()</full_name>
        <docblock line="180">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="12" code="PPC:ERR-50015">Argument $value is missing from the Docblock of _validate</error>
      <error line="12" code="PPC:ERR-50008">No summary for method ""</error>
    </parse_markers>
    <source>eJxtkDtrAzEQhHv9iolxYRs/+vhZpHGRJgZXAbPR7SGBThJaycQE//fI9hFIyFbL8O3sMKttNFEpTx1LJM3Y57MVG/zh8n4kZxvKIS2VWkwmChO8sOhkY64AQou9/2HeiuNK3KAdlWxCwmsx5D01OBh2jg1WXa/M5aHsbP9tJpe5Dt2mni+UdiTy1xv8mdk3gt/ql1KoE1PIrDM3aIvX93in8wPk0bBuhceVRT+Jc0kelBJdTsKUtOmpKYbZWJltIqXaSeYkYzyt12jJCW/xjMHxxkFMKK7BByN4vnWRDQvjbiKVwhwj20UXGh4Nphj8Zzxe3hNdlbqqbxi3gpc=</source>
  </file>
  <file path="Validator.php" generated-path="Validator.html" hash="91b79647b66b558194be017382156926" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="ItvisionSy\Validator" line="18" package="Default">
      <extends/>
      <name>Validator</name>
      <full_name>\ItvisionSy\Validator\Validator</full_name>
      <docblock line="18">
        <description>The bulk validation class.</description>
        <long-description>It handles the instantiation and feeding of validation items and rules, and evaluating them.

Basically, you will not need to handle other validator classes manually unless you need to customize the validation.
When created, you provide it with the rules and the values, and you will get an associative array of errors if any.</long-description>
        <tag name="author" line="18" description="Muhannad Shelleh" link="mailto:muhannad.shelleh@itvision-sy.com"/>
        <tag name="package" line="18" description="Default"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ItvisionSy\Validator" line="20" package="Default">
        <name>$items</name>
        <full_name>\ItvisionSy\Validator\Validator::items</full_name>
        <default>array()</default>
        <docblock line="20">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ItvisionSy\Validator" line="21" package="Default">
        <name>$errors</name>
        <full_name>\ItvisionSy\Validator\Validator::errors</full_name>
        <default>array()</default>
        <docblock line="21">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ItvisionSy\Validator" line="22" package="Default">
        <name>$values</name>
        <full_name>\ItvisionSy\Validator\Validator::values</full_name>
        <default>array()</default>
        <docblock line="22">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ItvisionSy\Validator" line="30" package="Default">
        <name>make</name>
        <full_name>\ItvisionSy\Validator\Validator::make()</full_name>
        <docblock line="30">
          <description>Creates a validator</description>
          <long-description></long-description>
          <tag name="param" line="30" description="&lt;p&gt;Array[key=&gt;rules,...] to be checked against&lt;/p&gt;" type="array" variable="$rules">
            <type>array</type>
          </tag>
          <tag name="param" line="30" description="&lt;p&gt;Array[key=&gt;value,...] to be tested&lt;/p&gt;" type="array" variable="$values">
            <type>array</type>
          </tag>
          <tag name="return" line="30" description="A validator object" type="\ItvisionSy\Validator\Validator">
            <type>\ItvisionSy\Validator\Validator</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$rules</name>
          <default>null</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$values</name>
          <default>null</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ItvisionSy\Validator" line="41" package="Default">
        <name>quick</name>
        <full_name>\ItvisionSy\Validator\Validator::quick()</full_name>
        <docblock line="41">
          <description>Quickly creats and validates a set of values against a set of rules</description>
          <long-description></long-description>
          <tag name="param" line="41" description="&lt;p&gt;Array[key=&gt;rules,...] to be checked against&lt;/p&gt;" type="array" variable="$rules">
            <type>array</type>
          </tag>
          <tag name="param" line="41" description="&lt;p&gt;Array[key=&gt;value,...] to be tested&lt;/p&gt;" type="array" variable="$values">
            <type>array</type>
          </tag>
          <tag name="param" line="41" description="&lt;p&gt;a reference variable to receive the validator object back&lt;/p&gt;" type="null" variable="$validator">
            <type>null</type>
          </tag>
          <tag name="return" line="41" description="TRUE if validation succeeded, array of errors otherwise" type="boolean|array">
            <type>boolean</type>
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$rules</name>
          <default></default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$values</name>
          <default></default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$validator</name>
          <default>null</default>
          <type>null</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="51" package="Default">
        <name>__construct</name>
        <full_name>\ItvisionSy\Validator\Validator::__construct()</full_name>
        <docblock line="51">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="51" description="&lt;p&gt;Array[key=&gt;rules,...] to be checked against&lt;/p&gt;" type="array" variable="$rules">
            <type>array</type>
          </tag>
          <tag name="param" line="51" description="&lt;p&gt;Array[key=&gt;value,...] to be tested&lt;/p&gt;" type="array" variable="$values">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$rules</name>
          <default>null</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$values</name>
          <default>null</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="70" package="Default">
        <name>item</name>
        <full_name>\ItvisionSy\Validator\Validator::item()</full_name>
        <docblock line="70">
          <description>Adds a new item to the validation</description>
          <long-description></long-description>
          <tag name="param" line="70" description="&lt;p&gt;The key to be validated&lt;/p&gt;" type="string|integer" variable="$key">
            <type>string</type>
            <type>integer</type>
          </tag>
          <tag name="param" line="70" description="&lt;p&gt;The value to be tested against the rules&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="param" line="70" description="&lt;p&gt;The rules for the value to be tested against&lt;/p&gt;" type="array&lt;mixed,string&gt;|string|\ItvisionSy\Validator\ValidatorRule|array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;" variable="$rules">
            <type>array&lt;mixed,string&gt;</type>
            <type>string</type>
            <type>\ItvisionSy\Validator\ValidatorRule</type>
            <type>array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;</type>
          </tag>
          <tag name="return" line="70" description="" type="\ItvisionSy\Validator\Validator">
            <type>\ItvisionSy\Validator\Validator</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>string|integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$rules</name>
          <default>null</default>
          <type>array&lt;mixed,string&gt;|string|\ItvisionSy\Validator\ValidatorRule|array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="79" package="Default">
        <name>validate</name>
        <full_name>\ItvisionSy\Validator\Validator::validate()</full_name>
        <docblock line="79">
          <description>Validates all the items</description>
          <long-description></long-description>
          <tag name="return" line="79" description="TRUE if all validation failed, FALSE otherwise. Error information can be accessed by the $errors property" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="90" package="Default">
        <name>__get</name>
        <full_name>\ItvisionSy\Validator\Validator::__get()</full_name>
        <docblock line="90">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <property final="false" static="false" visibility="public" line="18">
        <name>$items</name>
        <default/>
        <docblock>
          <description>The items to be validated</description>
          <long-description/>
          <tag name="var" description="&lt;p&gt;The items to be validated&lt;/p&gt;" type="array&lt;mixed,\ItvisionSy\Validator\ValidatorItem&gt;" line="18">
            <type by_reference="false">array&lt;mixed,\ItvisionSy\Validator\ValidatorItem&gt;</type>
          </tag>
          <tag name="magic" line="18"/>
          <tag name="property-read" line="18" description="The items to be validated" type="array&lt;mixed,\ItvisionSy\Validator\ValidatorItem&gt;" variable="$items">
            <type>array&lt;mixed,\ItvisionSy\Validator\ValidatorItem&gt;</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="18">
        <name>$errors</name>
        <default/>
        <docblock>
          <description>An array of errors resulted from the last validation. If no errors then empty array</description>
          <long-description/>
          <tag name="var" description="&lt;p&gt;An array of errors resulted from the last validation. If no errors then empty array&lt;/p&gt;" type="array&lt;mixed,string&gt;" line="18">
            <type by_reference="false">array&lt;mixed,string&gt;</type>
          </tag>
          <tag name="magic" line="18"/>
          <tag name="property-read" line="18" description="An array of errors resulted from the last validation. If no errors then empty array" type="array&lt;mixed,string&gt;" variable="$errors">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
      </property>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="30" code="PPC:ERR-50015">Argument $rules is missing from the Docblock of make</error>
      <error line="41" code="PPC:ERR-50015">Argument $rules is missing from the Docblock of quick</error>
      <error line="51" code="PPC:ERR-50015">Argument $rules is missing from the Docblock of __construct</error>
      <error line="51" code="PPC:ERR-50008">No summary for method ""</error>
      <error line="70" code="PPC:ERR-50015">Argument $key is missing from the Docblock of item</error>
      <error line="90" code="PPC:ERR-50015">Argument $name is missing from the Docblock of __get</error>
      <error line="90" code="PPC:ERR-50008">No summary for method ""</error>
      <error line="20" code="PPC:ERR-50007">No summary for property $items</error>
      <error line="21" code="PPC:ERR-50007">No summary for property $errors</error>
      <error line="22" code="PPC:ERR-50007">No summary for property $values</error>
    </parse_markers>
    <source>eJzNV21PIzcQ/p5fMZUiLkEh9HO4AGmPSpForwWOfsihyPE6rJt9SW0vXFr4752xvbveF65VP91KiMXjeXtm5tnh/cU+3g8GGUuF3jMuYGmepJZ5dnv4fM8SGTGTq7PB4PT4eADHcBcL2BTJDp6cDC8CT5jWU5LSz9JAzLIoERoMXpaZNiwz0l1FAWyFiGT2CPk2NCKNSLWVqwJ1J/ZV4IUC5XgbbaWVjx+YlpwlyWECh7yAZ5kkkOUGMjQNJvcBQI5KqnSSKxcoxpWyrCBtKDJ0pa2NUpUX2uSp/EvY6OsAre/fY4HpKsGMiJzrvcqfZIRpGozCxFbJJmDj9yaKMp8q2Edh8AAwnJwTNE8CmFLsQKAIpXKlQW7xxoHckudLVpgYU/i5wNwyFsFtLJJExPA+9SdT7U4upS/giT5MeZ6el6BdYqx7oczhBBOIoCruEpFfPcDQVYAK7N4QjE2FgIh6TGijsDSk62NeZJ00lNBFguqwVXlqAcEimBBYWG6xeOV9QxCLdG8OzhS6PR3YwtURw9+DAeCD0RjBybgPfg6rh7O2yBvulbnieJkV2j6n5xh+tIXGStYtVIou90yx1Cc7dAVf0B+rnTjMz10LT6fTB48ijwXfoUP2yGgg+s34YAI79iS0g+HYUnh1JUyhsgCYRdDt+eYPzNLfPXWZF5tEcqwbIs9hW2Tczl7KdmLUyGUOWZEkk1Zk7nSM8IN/fACZePZGR0M/vl5n7CB/7YD7WyH5DkfQTpOblrLVCHGNA+IIghx72Opz6+QbK4ZTJ4Sstq8CQ4y2QomM0ywpyTZITKivBBc09gHLVDWDDeO7dpE3eZ4Ilr24+O5uPl0RRQQMqgvOkcSImdpDaInwWWrxX7rhT6pMox1afTCBoyDBblM0hM76bGZ7rL85gkaqVU/Oy3YYjS9g1pC4rN7qrG+qLRpIVxCv1zxHF6rg5v/NHVZ+VEqPjkDqtdUoz8bhXVsSE0t9cl7Z8/dq/F+bpl00Dcv2qGN4m+P88rhSYRqGCAvMzx0n31itllLZJIXAUKz5NeqsxRepjR6R/qQZ8RgumgcruvSAbVFRHzmaze4X15+u1svb9S8f79a/3ny8X364+rBe3K0X19dn3RicSYqz9OqqGcbeVHttIdZtv0UUEYERJZIRaormJtFqLPcRfZGZEY+4rVj06CNMvzuf4IZmKr9U3zCr4t7CLqyYs9pLer2vHl58GA08m3/Rd94V+a5acrD89ZLT67lNY5/79sv67atj01eocG4aJFTXtuyWeXPnKTmpYamHksjQW1xzX3+ykPZNuTu9wd0Va9PlgLm3TCZE2z8trm+varKewhURHa7QCHPqd220ghgzpHpcZSPYHKzXcskp97OvwlgTa4hXZ01qjncAZ2fI2/NNFPKdlYQs3ssCzmtVIK8UEvxbkxcUuQp92Fb0+PO8yMzIS8cwn8P3jYp2+RkX9NGQ/ikKo9a44lsw2gJ6ONMC3lmA3s06iYbN5GE861F3Ef6rfh8+9GywWrs2qWOOr4N/ADpMU8U=</source>
  </file>
  <file path="PatternValidatorRule.php" generated-path="PatternValidatorRule.html" hash="97e87925feca5c76c56bfa539f8247c5" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="ItvisionSy\Validator" line="10" package="Default">
      <extends>\ItvisionSy\Validator\ValidatorRule</extends>
      <name>PatternValidatorRule</name>
      <full_name>\ItvisionSy\Validator\PatternValidatorRule</full_name>
      <docblock line="10">
        <description>Description of PatternValidatorRule</description>
        <long-description>It provides a skeleton and minimize the work needed by other classes.
Inherited rules will just have to implement the _validator, preferrably override the $args protected array.</long-description>
        <tag name="author" line="10" description="Muhannad Shelleh" link="mailto:muhannad.shelleh@itvision-sy.com"/>
        <tag name="package" line="10" description="Default"/>
        <tag name="inherited_from" description="\ItvisionSy\Validator\ValidatorRule" refers="\ItvisionSy\Validator\ValidatorRule" link="/classes/ItvisionSy.Validator.ValidatorRule.html"/>
      </docblock>
      <constant namespace="ItvisionSy\Validator" line="15" package="Default">
        <name>VALUE_IS_NOT_PROVIDED_AT_ALL</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::VALUE_IS_NOT_PROVIDED_AT_ALL</full_name>
        <value>"ItvisionSy\\Validator\\Validator\\CONST::VALUE_IS_NOT_PROVIDED_AT_ALL"</value>
        <docblock line="15">
          <description></description>
          <long-description></long-description>
        </docblock>
      </constant>
      <property static="false" visibility="protected" namespace="ItvisionSy\Validator" line="12" package="Default">
        <name>$args</name>
        <full_name>\ItvisionSy\Validator\PatternValidatorRule::args</full_name>
        <default>array('pattern')</default>
        <docblock line="12">
          <description>Providing this array as a simple strings list allows named access to parameters instead of 0-based index.</description>
          <long-description>i.e. suppose $args=['min','max'] and $parameters=[15,99], using $this-&gt;min return 15 and $this-&gt;max returns 99</long-description>
          <tag name="inherited_from" description="\ItvisionSy\Validator\ValidatorRule::args" refers="\ItvisionSy\Validator\ValidatorRule::args" link="/classes/ItvisionSy.Validator.ValidatorRule.html#property_args"/>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ItvisionSy\Validator" line="25" package="Default">
        <name>$parameters</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::parameters</full_name>
        <default>array()</default>
        <docblock line="25">
          <description>The parameters to be used for validation. They will be passed when instantiation of the rule object.</description>
          <long-description>Parameters can be accessed using their 0-based index: i.e. $this-&gt;_0 gets the first parameters.

If $args is also defined, the same parameters can be accessed using the opposite value in the $args array.</long-description>
          <tag name="var" line="25" description="" type="array&lt;mixed,mixed&gt;" variable="">
            <type>array&lt;mixed,mixed&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ItvisionSy\Validator" line="31" package="Default">
        <name>$args</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::args</full_name>
        <default>array()</default>
        <docblock line="31">
          <description>Providing this array as a simple strings list allows named access to parameters instead of 0-based index.</description>
          <long-description>i.e. suppose $args=['min','max'] and $parameters=[15,99], using $this-&gt;min return 15 and $this-&gt;max returns 99</long-description>
          <tag name="var" line="31" description="" type="array&lt;mixed,string&gt;" variable="">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ItvisionSy\Validator" line="37" package="Default">
        <name>$ignoreNotProvided</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::ignoreNotProvided</full_name>
        <default>true</default>
        <docblock line="37">
          <description>If true, the validator will be run even against not provided values, which will be mentioned as the string in the constant VALUE_IS_NOT_PROVIDED_AT_ALL</description>
          <long-description></long-description>
          <tag name="var" line="37" description="" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ItvisionSy\Validator" line="14" package="Default">
        <name>_validate</name>
        <full_name>\ItvisionSy\Validator\PatternValidatorRule::_validate()</full_name>
        <docblock line="14">
          <description>The actual validation logic of the class</description>
          <long-description></long-description>
          <tag name="inherited_from" description="\ItvisionSy\Validator\ValidatorRule::_validate()" refers="\ItvisionSy\Validator\ValidatorRule::_validate()" link="/classes/ItvisionSy.Validator.ValidatorRule.html#method__validate"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ItvisionSy\Validator" line="44" package="Default">
        <name>make</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::make()</full_name>
        <docblock line="44">
          <description>Return an instance of ValidatorRule</description>
          <long-description></long-description>
          <tag name="param" line="44" description="&lt;p&gt;a map of values for the ValidatorRule to use in validation. Any key/value pair will be available as a direct attribute.&lt;/p&gt;" type="array" variable="$parameters">
            <type>array</type>
          </tag>
          <tag name="return" line="44" description="" type="\ItvisionSy\Validator\ValidatorRule">
            <type>\ItvisionSy\Validator\ValidatorRule</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parameters</name>
          <default>null</default>
          <type>array</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ItvisionSy\Validator" line="58" package="Default">
        <name>quick</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::quick()</full_name>
        <docblock line="58">
          <description>Quickly instantiate a ValidatorRule and runs it against a value</description>
          <long-description>It is a shorthand for rule::make($parameters)-&gt;validate($value);</long-description>
          <tag name="param" line="58" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="param" line="58" description="&lt;p&gt;a map of values for the ValidatorRule to use in validation. Any key/value pair will be available as a direct attribute.&lt;/p&gt;" type="array" variable="$parameters">
            <type>array</type>
          </tag>
          <tag name="param" line="58" description="&lt;p&gt;A reference variable to take the ValidatorRule back&lt;/p&gt;" type="null" variable="$ValidatorRule">
            <type>null</type>
          </tag>
          <tag name="return" line="58" description="TRUE if validation succeeded, string or array of errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$parameters</name>
          <default>null</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$validatorRule</name>
          <default>null</default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="67" package="Default">
        <name>__construct</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::__construct()</full_name>
        <docblock line="67">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="67" description="&lt;p&gt;a map of values for the ValidatorRule to use in validation. Any key/value pair will be available as a direct attribute.&lt;/p&gt;" type="array" variable="$parameters">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parameters</name>
          <default>null</default>
          <type>array</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="78" package="Default">
        <name>setParameters</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::setParameters()</full_name>
        <docblock line="78">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="78" description="" type="array" variable="$parameters">
            <type>array</type>
          </tag>
          <tag name="return" line="78" description="" type="\ItvisionSy\Validator\ValidatorRule">
            <type>\ItvisionSy\Validator\ValidatorRule</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parameters</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ItvisionSy\Validator" line="88" package="Default">
        <name>_validate</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::_validate()</full_name>
        <docblock line="88">
          <description>The actual validation logic of the class</description>
          <long-description></long-description>
          <tag name="param" line="88" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="88" description="TRUE if validation succeeded, string error or array of string errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ItvisionSy\Validator" line="94" package="Default">
        <name>preRules</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::preRules()</full_name>
        <docblock line="94">
          <description>Returns a ValidatorRule[] which will be validated before validating this rule</description>
          <long-description></long-description>
          <tag name="return" line="94" description="" type="\ItvisionSy\Validator\ValidatorRule|array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;">
            <type>\ItvisionSy\Validator\ValidatorRule</type>
            <type>array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ItvisionSy\Validator" line="102" package="Default">
        <name>postRules</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::postRules()</full_name>
        <docblock line="102">
          <description>Returns a ValidatorRule[] which will be validated after successfully validating this rule</description>
          <long-description></long-description>
          <tag name="return" line="102" description="" type="\ItvisionSy\Validator\ValidatorRule|array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;">
            <type>\ItvisionSy\Validator\ValidatorRule</type>
            <type>array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="111" package="Default">
        <name>validate</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::validate()</full_name>
        <docblock line="111">
          <description>Validates a value against the rule</description>
          <long-description></long-description>
          <tag name="param" line="111" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="111" description="TRUE if validation succeeded, string or array of errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="130" package="Default">
        <name>preValidate</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::preValidate()</full_name>
        <docblock line="130">
          <description>Executes the pre validation rules and returns.</description>
          <long-description></long-description>
          <tag name="param" line="130" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="130" description="TRUE if validation succeeded, string or array of errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="146" package="Default">
        <name>postValidate</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::postValidate()</full_name>
        <docblock line="146">
          <description>Executes the post validation rules</description>
          <long-description></long-description>
          <tag name="param" line="146" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="146" description="TRUE if validation succeeded, string or array of errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="157" package="Default">
        <name>__get</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::__get()</full_name>
        <docblock line="157">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="168" package="Default">
        <name>offsetExists</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::offsetExists()</full_name>
        <docblock line="168">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="172" package="Default">
        <name>offsetGet</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::offsetGet()</full_name>
        <docblock line="172">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="176" package="Default">
        <name>offsetSet</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::offsetSet()</full_name>
        <docblock line="176">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="180" package="Default">
        <name>offsetUnset</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::offsetUnset()</full_name>
        <docblock line="180">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="14" code="PPC:ERR-50015">Argument $value is missing from the Docblock of _validate</error>
      <error line="14" code="PPC:ERR-50008">No summary for method ""</error>
      <error line="12" code="PPC:ERR-50007">No summary for property $args</error>
    </parse_markers>
    <source>eJxtj0FrAjEQhe/5FaMsaJeq92rVQy89FEoFL22RkIwmsJukmYlUiv+92d1QEDqHYXi89z1mtQkmCOFkixSkQnjmsyXr3e7ysZeN1ZJ9XAqxqGsBNTwhqWgDZwP4I7xKZozuz/iWGsy2zrmViY2P8JKMdE5q2BlsGjSwaosyp0HZ2lI5o8tc+Xad4wuhGkn0bwHgN6PTBLfqj4A8/QrRMypGDZWMJ4JHeJ+EgTT5zM/ceo7Jqf6hw3kA4rTKV8K7wuwmIqfoYDQKEU+HVrIy04qNpdm6kO+hpDYP4313gPZI4DxDi8jABjPlK9mYO0tmvOwLrkJcxS+QkoQC</source>
  </file>
  <file path="MinValidatorRule.php" generated-path="MinValidatorRule.html" hash="30de7e81e007b267434a25da31db6ba4" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="ItvisionSy\Validator" line="10" package="Default">
      <extends>\ItvisionSy\Validator\ValidatorRule</extends>
      <name>MinValidatorRule</name>
      <full_name>\ItvisionSy\Validator\MinValidatorRule</full_name>
      <docblock line="10">
        <description>Description of MinValidatorRule</description>
        <long-description>It provides a skeleton and minimize the work needed by other classes.
Inherited rules will just have to implement the _validator, preferrably override the $args protected array.</long-description>
        <tag name="author" line="10" description="Muhannad Shelleh" link="mailto:muhannad.shelleh@itvision-sy.com"/>
        <tag name="package" line="10" description="Default"/>
        <tag name="inherited_from" description="\ItvisionSy\Validator\ValidatorRule" refers="\ItvisionSy\Validator\ValidatorRule" link="/classes/ItvisionSy.Validator.ValidatorRule.html"/>
      </docblock>
      <constant namespace="ItvisionSy\Validator" line="15" package="Default">
        <name>VALUE_IS_NOT_PROVIDED_AT_ALL</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::VALUE_IS_NOT_PROVIDED_AT_ALL</full_name>
        <value>"ItvisionSy\\Validator\\Validator\\CONST::VALUE_IS_NOT_PROVIDED_AT_ALL"</value>
        <docblock line="15">
          <description></description>
          <long-description></long-description>
        </docblock>
      </constant>
      <property static="false" visibility="protected" namespace="ItvisionSy\Validator" line="12" package="Default">
        <name>$args</name>
        <full_name>\ItvisionSy\Validator\MinValidatorRule::args</full_name>
        <default>array('min')</default>
        <docblock line="12">
          <description>Providing this array as a simple strings list allows named access to parameters instead of 0-based index.</description>
          <long-description>i.e. suppose $args=['min','max'] and $parameters=[15,99], using $this-&gt;min return 15 and $this-&gt;max returns 99</long-description>
          <tag name="inherited_from" description="\ItvisionSy\Validator\ValidatorRule::args" refers="\ItvisionSy\Validator\ValidatorRule::args" link="/classes/ItvisionSy.Validator.ValidatorRule.html#property_args"/>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ItvisionSy\Validator" line="25" package="Default">
        <name>$parameters</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::parameters</full_name>
        <default>array()</default>
        <docblock line="25">
          <description>The parameters to be used for validation. They will be passed when instantiation of the rule object.</description>
          <long-description>Parameters can be accessed using their 0-based index: i.e. $this-&gt;_0 gets the first parameters.

If $args is also defined, the same parameters can be accessed using the opposite value in the $args array.</long-description>
          <tag name="var" line="25" description="" type="array&lt;mixed,mixed&gt;" variable="">
            <type>array&lt;mixed,mixed&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ItvisionSy\Validator" line="31" package="Default">
        <name>$args</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::args</full_name>
        <default>array()</default>
        <docblock line="31">
          <description>Providing this array as a simple strings list allows named access to parameters instead of 0-based index.</description>
          <long-description>i.e. suppose $args=['min','max'] and $parameters=[15,99], using $this-&gt;min return 15 and $this-&gt;max returns 99</long-description>
          <tag name="var" line="31" description="" type="array&lt;mixed,string&gt;" variable="">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ItvisionSy\Validator" line="37" package="Default">
        <name>$ignoreNotProvided</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::ignoreNotProvided</full_name>
        <default>true</default>
        <docblock line="37">
          <description>If true, the validator will be run even against not provided values, which will be mentioned as the string in the constant VALUE_IS_NOT_PROVIDED_AT_ALL</description>
          <long-description></long-description>
          <tag name="var" line="37" description="" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ItvisionSy\Validator" line="14" package="Default">
        <name>_validate</name>
        <full_name>\ItvisionSy\Validator\MinValidatorRule::_validate()</full_name>
        <docblock line="14">
          <description>The actual validation logic of the class</description>
          <long-description></long-description>
          <tag name="inherited_from" description="\ItvisionSy\Validator\ValidatorRule::_validate()" refers="\ItvisionSy\Validator\ValidatorRule::_validate()" link="/classes/ItvisionSy.Validator.ValidatorRule.html#method__validate"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ItvisionSy\Validator" line="44" package="Default">
        <name>make</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::make()</full_name>
        <docblock line="44">
          <description>Return an instance of ValidatorRule</description>
          <long-description></long-description>
          <tag name="param" line="44" description="&lt;p&gt;a map of values for the ValidatorRule to use in validation. Any key/value pair will be available as a direct attribute.&lt;/p&gt;" type="array" variable="$parameters">
            <type>array</type>
          </tag>
          <tag name="return" line="44" description="" type="\ItvisionSy\Validator\ValidatorRule">
            <type>\ItvisionSy\Validator\ValidatorRule</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parameters</name>
          <default>null</default>
          <type>array</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ItvisionSy\Validator" line="58" package="Default">
        <name>quick</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::quick()</full_name>
        <docblock line="58">
          <description>Quickly instantiate a ValidatorRule and runs it against a value</description>
          <long-description>It is a shorthand for rule::make($parameters)-&gt;validate($value);</long-description>
          <tag name="param" line="58" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="param" line="58" description="&lt;p&gt;a map of values for the ValidatorRule to use in validation. Any key/value pair will be available as a direct attribute.&lt;/p&gt;" type="array" variable="$parameters">
            <type>array</type>
          </tag>
          <tag name="param" line="58" description="&lt;p&gt;A reference variable to take the ValidatorRule back&lt;/p&gt;" type="null" variable="$ValidatorRule">
            <type>null</type>
          </tag>
          <tag name="return" line="58" description="TRUE if validation succeeded, string or array of errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$parameters</name>
          <default>null</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$validatorRule</name>
          <default>null</default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="67" package="Default">
        <name>__construct</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::__construct()</full_name>
        <docblock line="67">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="67" description="&lt;p&gt;a map of values for the ValidatorRule to use in validation. Any key/value pair will be available as a direct attribute.&lt;/p&gt;" type="array" variable="$parameters">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parameters</name>
          <default>null</default>
          <type>array</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="78" package="Default">
        <name>setParameters</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::setParameters()</full_name>
        <docblock line="78">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="78" description="" type="array" variable="$parameters">
            <type>array</type>
          </tag>
          <tag name="return" line="78" description="" type="\ItvisionSy\Validator\ValidatorRule">
            <type>\ItvisionSy\Validator\ValidatorRule</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parameters</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ItvisionSy\Validator" line="88" package="Default">
        <name>_validate</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::_validate()</full_name>
        <docblock line="88">
          <description>The actual validation logic of the class</description>
          <long-description></long-description>
          <tag name="param" line="88" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="88" description="TRUE if validation succeeded, string error or array of string errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ItvisionSy\Validator" line="94" package="Default">
        <name>preRules</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::preRules()</full_name>
        <docblock line="94">
          <description>Returns a ValidatorRule[] which will be validated before validating this rule</description>
          <long-description></long-description>
          <tag name="return" line="94" description="" type="\ItvisionSy\Validator\ValidatorRule|array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;">
            <type>\ItvisionSy\Validator\ValidatorRule</type>
            <type>array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ItvisionSy\Validator" line="102" package="Default">
        <name>postRules</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::postRules()</full_name>
        <docblock line="102">
          <description>Returns a ValidatorRule[] which will be validated after successfully validating this rule</description>
          <long-description></long-description>
          <tag name="return" line="102" description="" type="\ItvisionSy\Validator\ValidatorRule|array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;">
            <type>\ItvisionSy\Validator\ValidatorRule</type>
            <type>array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="111" package="Default">
        <name>validate</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::validate()</full_name>
        <docblock line="111">
          <description>Validates a value against the rule</description>
          <long-description></long-description>
          <tag name="param" line="111" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="111" description="TRUE if validation succeeded, string or array of errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="130" package="Default">
        <name>preValidate</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::preValidate()</full_name>
        <docblock line="130">
          <description>Executes the pre validation rules and returns.</description>
          <long-description></long-description>
          <tag name="param" line="130" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="130" description="TRUE if validation succeeded, string or array of errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="146" package="Default">
        <name>postValidate</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::postValidate()</full_name>
        <docblock line="146">
          <description>Executes the post validation rules</description>
          <long-description></long-description>
          <tag name="param" line="146" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="146" description="TRUE if validation succeeded, string or array of errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="157" package="Default">
        <name>__get</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::__get()</full_name>
        <docblock line="157">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="168" package="Default">
        <name>offsetExists</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::offsetExists()</full_name>
        <docblock line="168">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="172" package="Default">
        <name>offsetGet</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::offsetGet()</full_name>
        <docblock line="172">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="176" package="Default">
        <name>offsetSet</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::offsetSet()</full_name>
        <docblock line="176">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="180" package="Default">
        <name>offsetUnset</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::offsetUnset()</full_name>
        <docblock line="180">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="14" code="PPC:ERR-50015">Argument $value is missing from the Docblock of _validate</error>
      <error line="14" code="PPC:ERR-50008">No summary for method ""</error>
      <error line="12" code="PPC:ERR-50007">No summary for property $args</error>
    </parse_markers>
    <source>eJyFkD1vAjEMhvf8CgshQZGAvXwOXTqwFImlrVB6Zy6Rcsk1dlAR4r/XcFd6LarqIYpeP7Zfe7qoTKWU1yVSpTOER95bssGvDy8b7WyuOcSJUuPBQMEAHpCyaCsWAMIOVtZfoafkUJAztdSJTYiwSkZ7r3NYG3QODUzLRhlRrSxtM25Ih1EWyrmUj1XmNNFNc8APRp8T/FSPSoFEFQNjxphDV8eCYAbPvdL63uvkd36XfHZZYLuvG2G/K7+Ed9ILmrA76Fva+lRitNkX0CbOEZFT9FBnYT6DLhtLw7kMXsA9dDYXnUxILoc32eA9aQccQI5TRJTREVguAsfvwlNncp1xAnSEjRfiaH3xjxWBHPrrQn9ZEqZg03LWNgCaBdDEbSeqftVJfQI0QrMS</source>
  </file>
  <file path="NumberValidatorRule.php" generated-path="NumberValidatorRule.html" hash="a44877fb0bb0fa3361d1aea61f0a114f" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="ItvisionSy\Validator" line="10" package="Default">
      <extends>\ItvisionSy\Validator\ValidatorRule</extends>
      <name>NumberValidatorRule</name>
      <full_name>\ItvisionSy\Validator\NumberValidatorRule</full_name>
      <docblock line="10">
        <description>Description of NumberValidatorRule</description>
        <long-description>It provides a skeleton and minimize the work needed by other classes.
Inherited rules will just have to implement the _validator, preferrably override the $args protected array.</long-description>
        <tag name="author" line="10" description="Muhannad Shelleh" link="mailto:muhannad.shelleh@itvision-sy.com"/>
        <tag name="package" line="10" description="Default"/>
        <tag name="inherited_from" description="\ItvisionSy\Validator\ValidatorRule" refers="\ItvisionSy\Validator\ValidatorRule" link="/classes/ItvisionSy.Validator.ValidatorRule.html"/>
      </docblock>
      <constant namespace="ItvisionSy\Validator" line="15" package="Default">
        <name>VALUE_IS_NOT_PROVIDED_AT_ALL</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::VALUE_IS_NOT_PROVIDED_AT_ALL</full_name>
        <value>"ItvisionSy\\Validator\\Validator\\CONST::VALUE_IS_NOT_PROVIDED_AT_ALL"</value>
        <docblock line="15">
          <description></description>
          <long-description></long-description>
        </docblock>
      </constant>
      <property static="false" visibility="protected" namespace="ItvisionSy\Validator" line="25" package="Default">
        <name>$parameters</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::parameters</full_name>
        <default>array()</default>
        <docblock line="25">
          <description>The parameters to be used for validation. They will be passed when instantiation of the rule object.</description>
          <long-description>Parameters can be accessed using their 0-based index: i.e. $this-&gt;_0 gets the first parameters.

If $args is also defined, the same parameters can be accessed using the opposite value in the $args array.</long-description>
          <tag name="var" line="25" description="" type="array&lt;mixed,mixed&gt;" variable="">
            <type>array&lt;mixed,mixed&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ItvisionSy\Validator" line="31" package="Default">
        <name>$args</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::args</full_name>
        <default>array()</default>
        <docblock line="31">
          <description>Providing this array as a simple strings list allows named access to parameters instead of 0-based index.</description>
          <long-description>i.e. suppose $args=['min','max'] and $parameters=[15,99], using $this-&gt;min return 15 and $this-&gt;max returns 99</long-description>
          <tag name="var" line="31" description="" type="array&lt;mixed,string&gt;" variable="">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ItvisionSy\Validator" line="37" package="Default">
        <name>$ignoreNotProvided</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::ignoreNotProvided</full_name>
        <default>true</default>
        <docblock line="37">
          <description>If true, the validator will be run even against not provided values, which will be mentioned as the string in the constant VALUE_IS_NOT_PROVIDED_AT_ALL</description>
          <long-description></long-description>
          <tag name="var" line="37" description="" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ItvisionSy\Validator" line="12" package="Default">
        <name>_validate</name>
        <full_name>\ItvisionSy\Validator\NumberValidatorRule::_validate()</full_name>
        <docblock line="12">
          <description>The actual validation logic of the class</description>
          <long-description></long-description>
          <tag name="inherited_from" description="\ItvisionSy\Validator\ValidatorRule::_validate()" refers="\ItvisionSy\Validator\ValidatorRule::_validate()" link="/classes/ItvisionSy.Validator.ValidatorRule.html#method__validate"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ItvisionSy\Validator" line="44" package="Default">
        <name>make</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::make()</full_name>
        <docblock line="44">
          <description>Return an instance of ValidatorRule</description>
          <long-description></long-description>
          <tag name="param" line="44" description="&lt;p&gt;a map of values for the ValidatorRule to use in validation. Any key/value pair will be available as a direct attribute.&lt;/p&gt;" type="array" variable="$parameters">
            <type>array</type>
          </tag>
          <tag name="return" line="44" description="" type="\ItvisionSy\Validator\ValidatorRule">
            <type>\ItvisionSy\Validator\ValidatorRule</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parameters</name>
          <default>null</default>
          <type>array</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ItvisionSy\Validator" line="58" package="Default">
        <name>quick</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::quick()</full_name>
        <docblock line="58">
          <description>Quickly instantiate a ValidatorRule and runs it against a value</description>
          <long-description>It is a shorthand for rule::make($parameters)-&gt;validate($value);</long-description>
          <tag name="param" line="58" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="param" line="58" description="&lt;p&gt;a map of values for the ValidatorRule to use in validation. Any key/value pair will be available as a direct attribute.&lt;/p&gt;" type="array" variable="$parameters">
            <type>array</type>
          </tag>
          <tag name="param" line="58" description="&lt;p&gt;A reference variable to take the ValidatorRule back&lt;/p&gt;" type="null" variable="$ValidatorRule">
            <type>null</type>
          </tag>
          <tag name="return" line="58" description="TRUE if validation succeeded, string or array of errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$parameters</name>
          <default>null</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$validatorRule</name>
          <default>null</default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="67" package="Default">
        <name>__construct</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::__construct()</full_name>
        <docblock line="67">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="67" description="&lt;p&gt;a map of values for the ValidatorRule to use in validation. Any key/value pair will be available as a direct attribute.&lt;/p&gt;" type="array" variable="$parameters">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parameters</name>
          <default>null</default>
          <type>array</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="78" package="Default">
        <name>setParameters</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::setParameters()</full_name>
        <docblock line="78">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="78" description="" type="array" variable="$parameters">
            <type>array</type>
          </tag>
          <tag name="return" line="78" description="" type="\ItvisionSy\Validator\ValidatorRule">
            <type>\ItvisionSy\Validator\ValidatorRule</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parameters</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ItvisionSy\Validator" line="88" package="Default">
        <name>_validate</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::_validate()</full_name>
        <docblock line="88">
          <description>The actual validation logic of the class</description>
          <long-description></long-description>
          <tag name="param" line="88" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="88" description="TRUE if validation succeeded, string error or array of string errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ItvisionSy\Validator" line="94" package="Default">
        <name>preRules</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::preRules()</full_name>
        <docblock line="94">
          <description>Returns a ValidatorRule[] which will be validated before validating this rule</description>
          <long-description></long-description>
          <tag name="return" line="94" description="" type="\ItvisionSy\Validator\ValidatorRule|array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;">
            <type>\ItvisionSy\Validator\ValidatorRule</type>
            <type>array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ItvisionSy\Validator" line="102" package="Default">
        <name>postRules</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::postRules()</full_name>
        <docblock line="102">
          <description>Returns a ValidatorRule[] which will be validated after successfully validating this rule</description>
          <long-description></long-description>
          <tag name="return" line="102" description="" type="\ItvisionSy\Validator\ValidatorRule|array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;">
            <type>\ItvisionSy\Validator\ValidatorRule</type>
            <type>array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="111" package="Default">
        <name>validate</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::validate()</full_name>
        <docblock line="111">
          <description>Validates a value against the rule</description>
          <long-description></long-description>
          <tag name="param" line="111" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="111" description="TRUE if validation succeeded, string or array of errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="130" package="Default">
        <name>preValidate</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::preValidate()</full_name>
        <docblock line="130">
          <description>Executes the pre validation rules and returns.</description>
          <long-description></long-description>
          <tag name="param" line="130" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="130" description="TRUE if validation succeeded, string or array of errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="146" package="Default">
        <name>postValidate</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::postValidate()</full_name>
        <docblock line="146">
          <description>Executes the post validation rules</description>
          <long-description></long-description>
          <tag name="param" line="146" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="146" description="TRUE if validation succeeded, string or array of errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="157" package="Default">
        <name>__get</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::__get()</full_name>
        <docblock line="157">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="168" package="Default">
        <name>offsetExists</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::offsetExists()</full_name>
        <docblock line="168">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="172" package="Default">
        <name>offsetGet</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::offsetGet()</full_name>
        <docblock line="172">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="176" package="Default">
        <name>offsetSet</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::offsetSet()</full_name>
        <docblock line="176">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="180" package="Default">
        <name>offsetUnset</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::offsetUnset()</full_name>
        <docblock line="180">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="12" code="PPC:ERR-50015">Argument $value is missing from the Docblock of _validate</error>
      <error line="12" code="PPC:ERR-50008">No summary for method ""</error>
    </parse_markers>
    <source>eJxtjj9rQkEQxPv9FINYJA+ifZRoYZPCFBGsAnLeW7mD+8ftnUSC3z3n8yUQyFTD8NvZWa6SSURBeZakNOO1nK3YGHaXj71ytlcl5gXRvOsIHTYsOttUGoB4wlv1R86/3Ht13KgbuFa1mJixrUaFoHrsDDvHBks/JjO5J2s7fnySy0xH/9LO56SdEvmvH/xZOPSCv+kXEZpSjoV14R6nGvQw83C+g/wwba7yY2MxKnOpOcDKIVTP2eofZoVnTPY3CzGxuh5HhkIY9kwWQ8GV6ErfHexrxw==</source>
  </file>
  <file path="ValidatorRule.php" generated-path="ValidatorRule.html" hash="ebe67d8d6b45cdf8ee0cdb5c6d536d58" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="true" namespace="ItvisionSy\Validator" line="13" package="Default">
      <extends/>
      <implements>\ArrayAccess</implements>
      <name>ValidatorRule</name>
      <full_name>\ItvisionSy\Validator\ValidatorRule</full_name>
      <docblock line="13">
        <description>The core class to be inherited by actual rules.</description>
        <long-description>It provides a skeleton and minimize the work needed by other classes.
Inherited rules will just have to implement the _validator, preferrably override the $args protected array.</long-description>
        <tag name="author" line="13" description="Muhannad Shelleh" link="mailto:muhannad.shelleh@itvision-sy.com"/>
        <tag name="package" line="13" description="Default"/>
      </docblock>
      <constant namespace="ItvisionSy\Validator" line="15" package="Default">
        <name>VALUE_IS_NOT_PROVIDED_AT_ALL</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::VALUE_IS_NOT_PROVIDED_AT_ALL</full_name>
        <value>"ItvisionSy\\Validator\\Validator\\CONST::VALUE_IS_NOT_PROVIDED_AT_ALL"</value>
        <docblock line="15">
          <description></description>
          <long-description></long-description>
        </docblock>
      </constant>
      <property static="false" visibility="protected" namespace="ItvisionSy\Validator" line="25" package="Default">
        <name>$parameters</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::parameters</full_name>
        <default>array()</default>
        <docblock line="25">
          <description>The parameters to be used for validation. They will be passed when instantiation of the rule object.</description>
          <long-description>Parameters can be accessed using their 0-based index: i.e. $this-&gt;_0 gets the first parameters.

If $args is also defined, the same parameters can be accessed using the opposite value in the $args array.</long-description>
          <tag name="var" line="25" description="" type="array&lt;mixed,mixed&gt;" variable="">
            <type>array&lt;mixed,mixed&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ItvisionSy\Validator" line="31" package="Default">
        <name>$args</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::args</full_name>
        <default>array()</default>
        <docblock line="31">
          <description>Providing this array as a simple strings list allows named access to parameters instead of 0-based index.</description>
          <long-description>i.e. suppose $args=['min','max'] and $parameters=[15,99], using $this-&gt;min return 15 and $this-&gt;max returns 99</long-description>
          <tag name="var" line="31" description="" type="array&lt;mixed,string&gt;" variable="">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ItvisionSy\Validator" line="37" package="Default">
        <name>$ignoreNotProvided</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::ignoreNotProvided</full_name>
        <default>true</default>
        <docblock line="37">
          <description>If true, the validator will be run even against not provided values, which will be mentioned as the string in the constant VALUE_IS_NOT_PROVIDED_AT_ALL</description>
          <long-description></long-description>
          <tag name="var" line="37" description="" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ItvisionSy\Validator" line="44" package="Default">
        <name>make</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::make()</full_name>
        <docblock line="44">
          <description>Return an instance of ValidatorRule</description>
          <long-description></long-description>
          <tag name="param" line="44" description="&lt;p&gt;a map of values for the ValidatorRule to use in validation. Any key/value pair will be available as a direct attribute.&lt;/p&gt;" type="array" variable="$parameters">
            <type>array</type>
          </tag>
          <tag name="return" line="44" description="" type="\ItvisionSy\Validator\ValidatorRule">
            <type>\ItvisionSy\Validator\ValidatorRule</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parameters</name>
          <default>null</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ItvisionSy\Validator" line="58" package="Default">
        <name>quick</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::quick()</full_name>
        <docblock line="58">
          <description>Quickly instantiate a ValidatorRule and runs it against a value</description>
          <long-description>It is a shorthand for rule::make($parameters)-&gt;validate($value);</long-description>
          <tag name="param" line="58" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="param" line="58" description="&lt;p&gt;a map of values for the ValidatorRule to use in validation. Any key/value pair will be available as a direct attribute.&lt;/p&gt;" type="array" variable="$parameters">
            <type>array</type>
          </tag>
          <tag name="param" line="58" description="&lt;p&gt;A reference variable to take the ValidatorRule back&lt;/p&gt;" type="null" variable="$ValidatorRule">
            <type>null</type>
          </tag>
          <tag name="return" line="58" description="TRUE if validation succeeded, string or array of errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$parameters</name>
          <default>null</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$validatorRule</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="67" package="Default">
        <name>__construct</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::__construct()</full_name>
        <docblock line="67">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="67" description="&lt;p&gt;a map of values for the ValidatorRule to use in validation. Any key/value pair will be available as a direct attribute.&lt;/p&gt;" type="array" variable="$parameters">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parameters</name>
          <default>null</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="78" package="Default">
        <name>setParameters</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::setParameters()</full_name>
        <docblock line="78">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="78" description="" type="array" variable="$parameters">
            <type>array</type>
          </tag>
          <tag name="return" line="78" description="" type="\ItvisionSy\Validator\ValidatorRule">
            <type>\ItvisionSy\Validator\ValidatorRule</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parameters</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ItvisionSy\Validator" line="88" package="Default">
        <name>_validate</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::_validate()</full_name>
        <docblock line="88">
          <description>The actual validation logic of the class</description>
          <long-description></long-description>
          <tag name="param" line="88" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="88" description="TRUE if validation succeeded, string error or array of string errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ItvisionSy\Validator" line="94" package="Default">
        <name>preRules</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::preRules()</full_name>
        <docblock line="94">
          <description>Returns a ValidatorRule[] which will be validated before validating this rule</description>
          <long-description></long-description>
          <tag name="return" line="94" description="" type="\ItvisionSy\Validator\ValidatorRule|array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;">
            <type>\ItvisionSy\Validator\ValidatorRule</type>
            <type>array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ItvisionSy\Validator" line="102" package="Default">
        <name>postRules</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::postRules()</full_name>
        <docblock line="102">
          <description>Returns a ValidatorRule[] which will be validated after successfully validating this rule</description>
          <long-description></long-description>
          <tag name="return" line="102" description="" type="\ItvisionSy\Validator\ValidatorRule|array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;">
            <type>\ItvisionSy\Validator\ValidatorRule</type>
            <type>array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="111" package="Default">
        <name>validate</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::validate()</full_name>
        <docblock line="111">
          <description>Validates a value against the rule</description>
          <long-description></long-description>
          <tag name="param" line="111" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="111" description="TRUE if validation succeeded, string or array of errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="130" package="Default">
        <name>preValidate</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::preValidate()</full_name>
        <docblock line="130">
          <description>Executes the pre validation rules and returns.</description>
          <long-description></long-description>
          <tag name="param" line="130" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="130" description="TRUE if validation succeeded, string or array of errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="146" package="Default">
        <name>postValidate</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::postValidate()</full_name>
        <docblock line="146">
          <description>Executes the post validation rules</description>
          <long-description></long-description>
          <tag name="param" line="146" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="146" description="TRUE if validation succeeded, string or array of errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="157" package="Default">
        <name>__get</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::__get()</full_name>
        <docblock line="157">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="168" package="Default">
        <name>offsetExists</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::offsetExists()</full_name>
        <docblock line="168">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="172" package="Default">
        <name>offsetGet</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::offsetGet()</full_name>
        <docblock line="172">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="176" package="Default">
        <name>offsetSet</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::offsetSet()</full_name>
        <docblock line="176">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="180" package="Default">
        <name>offsetUnset</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::offsetUnset()</full_name>
        <docblock line="180">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="44" code="PPC:ERR-50015">Argument $parameters is missing from the Docblock of make</error>
      <error line="58" code="PPC:ERR-50015">Argument $value is missing from the Docblock of quick</error>
      <error line="67" code="PPC:ERR-50015">Argument $parameters is missing from the Docblock of __construct</error>
      <error line="67" code="PPC:ERR-50008">No summary for method ""</error>
      <error line="78" code="PPC:ERR-50015">Argument $parameters is missing from the Docblock of setParameters</error>
      <error line="78" code="PPC:ERR-50008">No summary for method ""</error>
      <error line="88" code="PPC:ERR-50015">Argument $value is missing from the Docblock of _validate</error>
      <error line="111" code="PPC:ERR-50015">Argument $value is missing from the Docblock of validate</error>
      <error line="130" code="PPC:ERR-50015">Argument $value is missing from the Docblock of preValidate</error>
      <error line="146" code="PPC:ERR-50015">Argument $value is missing from the Docblock of postValidate</error>
      <error line="157" code="PPC:ERR-50015">Argument $name is missing from the Docblock of __get</error>
      <error line="157" code="PPC:ERR-50008">No summary for method ""</error>
      <error line="168" code="PPC:ERR-50015">Argument $offset is missing from the Docblock of offsetExists</error>
      <error line="168" code="PPC:ERR-50008">No summary for method ""</error>
      <error line="172" code="PPC:ERR-50015">Argument $offset is missing from the Docblock of offsetGet</error>
      <error line="172" code="PPC:ERR-50008">No summary for method ""</error>
      <error line="176" code="PPC:ERR-50015">Argument $offset is missing from the Docblock of offsetSet</error>
      <error line="176" code="PPC:ERR-50015">Argument $value is missing from the Docblock of offsetSet</error>
      <error line="176" code="PPC:ERR-50008">No summary for method ""</error>
      <error line="180" code="PPC:ERR-50015">Argument $offset is missing from the Docblock of offsetUnset</error>
      <error line="180" code="PPC:ERR-50008">No summary for method ""</error>
    </parse_markers>
    <source>eJzVWFtP20gUfs+vOFtFJVQhlIc+AE2XaItWSGzLAuUFUDSxx8kUZ5z1jAPZLf99z5kZ2+MbvUm7bSRIYs+cy3e+881xXv+6Wqx6PcmWXK1YwOFEr4USibzY3FyxWIRMJ+lhr7f74kUPXsDlgkOQpPgvZkqBTmDGQcgFT4XmIcw2wAKdsRjSLOZqBLSH/k40rNJkLUKugIG64zHXiQQmQ1gKKZbibw4abd8n6R1IzkNrLMFrqfWF1oyhwpfxAPcijuFjpjQs2JpTQGK5ivmSS20MTtd5EkOMgEc8TdksRstr/IThmEV9ls4VBah5QKYZLtqQO/J4xDK9SFL4I1swKVkIFwsex3wBr5fuykjZK0fCYbejNqMgWb7B7bs9NlM6RVQcZAWo5xh/GayCmwl5nQQBx1X/9HqAryCRmNnV5PTD8fTkYvru/eX07Pz91cnb47fTyeV0cnoKY3jmlaysWeXjb+/fXVweHDxl6NmhdWkKTS9b7BVLkRqap3mxM4UARYiHAxb9jmjlxpZiRlsUrblfcInUUJpJLcw6SCIDN1UOktlHBHuU+zor/QRMkhlmkEBDmRJyThtFCi93ZoyuCRnyhwMQIz6Cvl4ItfNm+hLmHHEkD5FIEbcy9sJN/n4SuaIL5GOsEgh5JCQPh2a7wm1+5p0RQbJaJQrpSGhk1Aken3IWVT0frVmKnH/g4fWtu7Zr3kv69T3XY7i+PawX5sy0ko1BOEfATGcZQgEyDu8qiAXCwOI4uVdALR66HKiWnhOqEkdmY30qABfBG5xVRsm67MbXW9i4W8OtJXvYujWN7IU9vt57Ndzfvx06qFyJcAekXGephL1Xdo+7wR7cDQX7+xWobCrdWBmoLUp1mLDIOs24rWmhAwVP00wCXyNJ2ZwRAiCTQqVCW1A1RBqLYFHsoVZFJhOQlmk2vLzwpl+R70+2bCW9WZLEnMmu7MRcotq+S/RZHtfY5NRM9tziyvKeQynHclbUpnBsCuVo45ONwZKtaJtN3rQ5pVXVLOQOigCl7EvARG7gjm92bSOsmCiBZmsmYlRdbjkaihSzA6YRulmmecGyI8eNtqAdMtksFgGCjk4DiDIZGF1Zsjs+aKYzBpnF8TaKKbiXcyD5vbMx8NZv2z57bED7ZyaCOzwzSjHDTGqgEJmRUNhLuuATszg2tEcb1QGFp4pe0EbCmUTx4MBk4se088aBjJeNNRelryi2nEZTwC7KGZ9xp9q5kfCH54CNiwoH/arPCZjzmxO1sXWEsYaBaMSsJcQZC+7qzKLW+WRb9lMuLHB5/uEYRORlglKHMklDyDBvcETBYoXI4OSQIFJmOLkXqgj+SY7+RSRyNRy24G7JOoTn/XUljSaJGwusqxbyHNaJX93axa1mB/zgrKkAXyA+nRo5TrNAf5E4IAUq6Hm3DOz2qFJcl7NKB9qP3whjna43bcP4zWflsUCgGmvDXYVUNrsKQN7SJpNofRddaHB0zwFeU8XJHINzM6AZhr9Pwb67p00fVzrbv9HZ4MVAX57TJeeaHdV+UKv6CYJBV0eNImH8EtEjV55LPval/pHednR+qjnoGDKK4PH5iBaqQcuRmU+hzWJ/fT4sQkrZeigVYRdu/oPcEqW/ITnnxTy1Wjbmh3v+IPM/c/irz6UCkTpT60poBaE5gD5/nqc3Hpdnz1MDb11JvaTrmmmkyOUxLkQp5VetB1URa75jbKfjhnTXLba0aTOOb7JMPOsO9rHOPLe/i37HDzzIiH3EpJWnAVg/+/uHmTttB9ZnqJ+Hii0F9o+mlKss1ohxhI/qHmVIFRkqzMAebdseX/JWx7GhT0A16lbYNLc7p2yfCm7LLx1U8Ktql1ZtPHazoOyEz1EA2dXgwM9b9pZe+a66exr/kxa+OcPOuR706bebukAP+uY3GszEoDBVnKXBwq4d5pDQryPb2yZ0A2IDDlpNYBhbnlABx9XkRmU07uRmXw5hbxvVELamW122BkLqbaju2+tUWBs8zv9T/iCUVrUEvGm14xhpLLw2Fm47xvE6wkkU4Zh87Hzbby0jQjNM/NwW5ZPltOZ/p5J2emrJx669/QLTF6XpIbS0VKdt4oBZ/gVOPkjVnkFmb3Q6KcF57P0L+GSn2g==</source>
  </file>
  <file path="UrlValidatorRule.php" generated-path="UrlValidatorRule.html" hash="b95d073cd3bdfdebdefcd198aacf8573" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="ItvisionSy\Validator" line="10" package="Default">
      <extends>\ItvisionSy\Validator\ValidatorRule</extends>
      <name>UrlValidatorRule</name>
      <full_name>\ItvisionSy\Validator\UrlValidatorRule</full_name>
      <docblock line="10">
        <description>Description of UrlValidatorRule</description>
        <long-description>It provides a skeleton and minimize the work needed by other classes.
Inherited rules will just have to implement the _validator, preferrably override the $args protected array.</long-description>
        <tag name="author" line="10" description="Muhannad Shelleh" link="mailto:muhannad.shelleh@itvision-sy.com"/>
        <tag name="package" line="10" description="Default"/>
        <tag name="inherited_from" description="\ItvisionSy\Validator\ValidatorRule" refers="\ItvisionSy\Validator\ValidatorRule" link="/classes/ItvisionSy.Validator.ValidatorRule.html"/>
      </docblock>
      <constant namespace="ItvisionSy\Validator" line="15" package="Default">
        <name>VALUE_IS_NOT_PROVIDED_AT_ALL</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::VALUE_IS_NOT_PROVIDED_AT_ALL</full_name>
        <value>"ItvisionSy\\Validator\\Validator\\CONST::VALUE_IS_NOT_PROVIDED_AT_ALL"</value>
        <docblock line="15">
          <description></description>
          <long-description></long-description>
        </docblock>
      </constant>
      <property static="false" visibility="protected" namespace="ItvisionSy\Validator" line="25" package="Default">
        <name>$parameters</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::parameters</full_name>
        <default>array()</default>
        <docblock line="25">
          <description>The parameters to be used for validation. They will be passed when instantiation of the rule object.</description>
          <long-description>Parameters can be accessed using their 0-based index: i.e. $this-&gt;_0 gets the first parameters.

If $args is also defined, the same parameters can be accessed using the opposite value in the $args array.</long-description>
          <tag name="var" line="25" description="" type="array&lt;mixed,mixed&gt;" variable="">
            <type>array&lt;mixed,mixed&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ItvisionSy\Validator" line="31" package="Default">
        <name>$args</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::args</full_name>
        <default>array()</default>
        <docblock line="31">
          <description>Providing this array as a simple strings list allows named access to parameters instead of 0-based index.</description>
          <long-description>i.e. suppose $args=['min','max'] and $parameters=[15,99], using $this-&gt;min return 15 and $this-&gt;max returns 99</long-description>
          <tag name="var" line="31" description="" type="array&lt;mixed,string&gt;" variable="">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ItvisionSy\Validator" line="37" package="Default">
        <name>$ignoreNotProvided</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::ignoreNotProvided</full_name>
        <default>true</default>
        <docblock line="37">
          <description>If true, the validator will be run even against not provided values, which will be mentioned as the string in the constant VALUE_IS_NOT_PROVIDED_AT_ALL</description>
          <long-description></long-description>
          <tag name="var" line="37" description="" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ItvisionSy\Validator" line="12" package="Default">
        <name>_validate</name>
        <full_name>\ItvisionSy\Validator\UrlValidatorRule::_validate()</full_name>
        <docblock line="12">
          <description>The actual validation logic of the class</description>
          <long-description></long-description>
          <tag name="inherited_from" description="\ItvisionSy\Validator\ValidatorRule::_validate()" refers="\ItvisionSy\Validator\ValidatorRule::_validate()" link="/classes/ItvisionSy.Validator.ValidatorRule.html#method__validate"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ItvisionSy\Validator" line="44" package="Default">
        <name>make</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::make()</full_name>
        <docblock line="44">
          <description>Return an instance of ValidatorRule</description>
          <long-description></long-description>
          <tag name="param" line="44" description="&lt;p&gt;a map of values for the ValidatorRule to use in validation. Any key/value pair will be available as a direct attribute.&lt;/p&gt;" type="array" variable="$parameters">
            <type>array</type>
          </tag>
          <tag name="return" line="44" description="" type="\ItvisionSy\Validator\ValidatorRule">
            <type>\ItvisionSy\Validator\ValidatorRule</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parameters</name>
          <default>null</default>
          <type>array</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ItvisionSy\Validator" line="58" package="Default">
        <name>quick</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::quick()</full_name>
        <docblock line="58">
          <description>Quickly instantiate a ValidatorRule and runs it against a value</description>
          <long-description>It is a shorthand for rule::make($parameters)-&gt;validate($value);</long-description>
          <tag name="param" line="58" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="param" line="58" description="&lt;p&gt;a map of values for the ValidatorRule to use in validation. Any key/value pair will be available as a direct attribute.&lt;/p&gt;" type="array" variable="$parameters">
            <type>array</type>
          </tag>
          <tag name="param" line="58" description="&lt;p&gt;A reference variable to take the ValidatorRule back&lt;/p&gt;" type="null" variable="$ValidatorRule">
            <type>null</type>
          </tag>
          <tag name="return" line="58" description="TRUE if validation succeeded, string or array of errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$parameters</name>
          <default>null</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$validatorRule</name>
          <default>null</default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="67" package="Default">
        <name>__construct</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::__construct()</full_name>
        <docblock line="67">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="67" description="&lt;p&gt;a map of values for the ValidatorRule to use in validation. Any key/value pair will be available as a direct attribute.&lt;/p&gt;" type="array" variable="$parameters">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parameters</name>
          <default>null</default>
          <type>array</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="78" package="Default">
        <name>setParameters</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::setParameters()</full_name>
        <docblock line="78">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="78" description="" type="array" variable="$parameters">
            <type>array</type>
          </tag>
          <tag name="return" line="78" description="" type="\ItvisionSy\Validator\ValidatorRule">
            <type>\ItvisionSy\Validator\ValidatorRule</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parameters</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ItvisionSy\Validator" line="88" package="Default">
        <name>_validate</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::_validate()</full_name>
        <docblock line="88">
          <description>The actual validation logic of the class</description>
          <long-description></long-description>
          <tag name="param" line="88" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="88" description="TRUE if validation succeeded, string error or array of string errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ItvisionSy\Validator" line="94" package="Default">
        <name>preRules</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::preRules()</full_name>
        <docblock line="94">
          <description>Returns a ValidatorRule[] which will be validated before validating this rule</description>
          <long-description></long-description>
          <tag name="return" line="94" description="" type="\ItvisionSy\Validator\ValidatorRule|array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;">
            <type>\ItvisionSy\Validator\ValidatorRule</type>
            <type>array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ItvisionSy\Validator" line="102" package="Default">
        <name>postRules</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::postRules()</full_name>
        <docblock line="102">
          <description>Returns a ValidatorRule[] which will be validated after successfully validating this rule</description>
          <long-description></long-description>
          <tag name="return" line="102" description="" type="\ItvisionSy\Validator\ValidatorRule|array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;">
            <type>\ItvisionSy\Validator\ValidatorRule</type>
            <type>array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="111" package="Default">
        <name>validate</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::validate()</full_name>
        <docblock line="111">
          <description>Validates a value against the rule</description>
          <long-description></long-description>
          <tag name="param" line="111" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="111" description="TRUE if validation succeeded, string or array of errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="130" package="Default">
        <name>preValidate</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::preValidate()</full_name>
        <docblock line="130">
          <description>Executes the pre validation rules and returns.</description>
          <long-description></long-description>
          <tag name="param" line="130" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="130" description="TRUE if validation succeeded, string or array of errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="146" package="Default">
        <name>postValidate</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::postValidate()</full_name>
        <docblock line="146">
          <description>Executes the post validation rules</description>
          <long-description></long-description>
          <tag name="param" line="146" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="146" description="TRUE if validation succeeded, string or array of errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="157" package="Default">
        <name>__get</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::__get()</full_name>
        <docblock line="157">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="168" package="Default">
        <name>offsetExists</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::offsetExists()</full_name>
        <docblock line="168">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="172" package="Default">
        <name>offsetGet</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::offsetGet()</full_name>
        <docblock line="172">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="176" package="Default">
        <name>offsetSet</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::offsetSet()</full_name>
        <docblock line="176">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="180" package="Default">
        <name>offsetUnset</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::offsetUnset()</full_name>
        <docblock line="180">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="12" code="PPC:ERR-50015">Argument $value is missing from the Docblock of _validate</error>
      <error line="12" code="PPC:ERR-50008">No summary for method ""</error>
    </parse_markers>
    <source>eJxljkFrwkAQhe/zK0bpoYZW71WqghYC6SVqTkJYNhN2YbMbdmelUvzvXWMolL7T8N43b2a17lUPYEVHoReSMOeLDtrZw/VcCaMbwc4vARZZBpjhjoL0uucEoGvx5M0vVEZDCblTGxFZOY+fUQlrRYMHRcaQwlU3OvPwcDZ6PPcarnPpuve0vgBpRAj/ypG+mGwT8K/7DYBJvXdMkqnBNlo5PFhfHiA9P6Up0iyxOMoTR29xMmm1YfIJ9SP1guePvDjuy7raFvlue9zXp7KYrd+m1T1GHdA6RoFDO6ZsuhxqbwA3+AGL+W83</source>
  </file>
  <file path="EmailValidatorRule.php" generated-path="EmailValidatorRule.html" hash="f9f8768e79122aa50c3397ea98e9aca0" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="ItvisionSy\Validator" line="10" package="Default">
      <extends>\ItvisionSy\Validator\ValidatorRule</extends>
      <name>EmailValidatorRule</name>
      <full_name>\ItvisionSy\Validator\EmailValidatorRule</full_name>
      <docblock line="10">
        <description>Description of EmailValidatorRule</description>
        <long-description>It provides a skeleton and minimize the work needed by other classes.
Inherited rules will just have to implement the _validator, preferrably override the $args protected array.</long-description>
        <tag name="author" line="10" description="Muhannad Shelleh" link="mailto:muhannad.shelleh@itvision-sy.com"/>
        <tag name="package" line="10" description="Default"/>
        <tag name="inherited_from" description="\ItvisionSy\Validator\ValidatorRule" refers="\ItvisionSy\Validator\ValidatorRule" link="/classes/ItvisionSy.Validator.ValidatorRule.html"/>
      </docblock>
      <constant namespace="ItvisionSy\Validator" line="15" package="Default">
        <name>VALUE_IS_NOT_PROVIDED_AT_ALL</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::VALUE_IS_NOT_PROVIDED_AT_ALL</full_name>
        <value>"ItvisionSy\\Validator\\Validator\\CONST::VALUE_IS_NOT_PROVIDED_AT_ALL"</value>
        <docblock line="15">
          <description></description>
          <long-description></long-description>
        </docblock>
      </constant>
      <property static="false" visibility="protected" namespace="ItvisionSy\Validator" line="25" package="Default">
        <name>$parameters</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::parameters</full_name>
        <default>array()</default>
        <docblock line="25">
          <description>The parameters to be used for validation. They will be passed when instantiation of the rule object.</description>
          <long-description>Parameters can be accessed using their 0-based index: i.e. $this-&gt;_0 gets the first parameters.

If $args is also defined, the same parameters can be accessed using the opposite value in the $args array.</long-description>
          <tag name="var" line="25" description="" type="array&lt;mixed,mixed&gt;" variable="">
            <type>array&lt;mixed,mixed&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ItvisionSy\Validator" line="31" package="Default">
        <name>$args</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::args</full_name>
        <default>array()</default>
        <docblock line="31">
          <description>Providing this array as a simple strings list allows named access to parameters instead of 0-based index.</description>
          <long-description>i.e. suppose $args=['min','max'] and $parameters=[15,99], using $this-&gt;min return 15 and $this-&gt;max returns 99</long-description>
          <tag name="var" line="31" description="" type="array&lt;mixed,string&gt;" variable="">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ItvisionSy\Validator" line="37" package="Default">
        <name>$ignoreNotProvided</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::ignoreNotProvided</full_name>
        <default>true</default>
        <docblock line="37">
          <description>If true, the validator will be run even against not provided values, which will be mentioned as the string in the constant VALUE_IS_NOT_PROVIDED_AT_ALL</description>
          <long-description></long-description>
          <tag name="var" line="37" description="" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ItvisionSy\Validator" line="12" package="Default">
        <name>_validate</name>
        <full_name>\ItvisionSy\Validator\EmailValidatorRule::_validate()</full_name>
        <docblock line="12">
          <description>The actual validation logic of the class</description>
          <long-description></long-description>
          <tag name="inherited_from" description="\ItvisionSy\Validator\ValidatorRule::_validate()" refers="\ItvisionSy\Validator\ValidatorRule::_validate()" link="/classes/ItvisionSy.Validator.ValidatorRule.html#method__validate"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ItvisionSy\Validator" line="44" package="Default">
        <name>make</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::make()</full_name>
        <docblock line="44">
          <description>Return an instance of ValidatorRule</description>
          <long-description></long-description>
          <tag name="param" line="44" description="&lt;p&gt;a map of values for the ValidatorRule to use in validation. Any key/value pair will be available as a direct attribute.&lt;/p&gt;" type="array" variable="$parameters">
            <type>array</type>
          </tag>
          <tag name="return" line="44" description="" type="\ItvisionSy\Validator\ValidatorRule">
            <type>\ItvisionSy\Validator\ValidatorRule</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parameters</name>
          <default>null</default>
          <type>array</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ItvisionSy\Validator" line="58" package="Default">
        <name>quick</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::quick()</full_name>
        <docblock line="58">
          <description>Quickly instantiate a ValidatorRule and runs it against a value</description>
          <long-description>It is a shorthand for rule::make($parameters)-&gt;validate($value);</long-description>
          <tag name="param" line="58" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="param" line="58" description="&lt;p&gt;a map of values for the ValidatorRule to use in validation. Any key/value pair will be available as a direct attribute.&lt;/p&gt;" type="array" variable="$parameters">
            <type>array</type>
          </tag>
          <tag name="param" line="58" description="&lt;p&gt;A reference variable to take the ValidatorRule back&lt;/p&gt;" type="null" variable="$ValidatorRule">
            <type>null</type>
          </tag>
          <tag name="return" line="58" description="TRUE if validation succeeded, string or array of errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$parameters</name>
          <default>null</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$validatorRule</name>
          <default>null</default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="67" package="Default">
        <name>__construct</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::__construct()</full_name>
        <docblock line="67">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="67" description="&lt;p&gt;a map of values for the ValidatorRule to use in validation. Any key/value pair will be available as a direct attribute.&lt;/p&gt;" type="array" variable="$parameters">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parameters</name>
          <default>null</default>
          <type>array</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="78" package="Default">
        <name>setParameters</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::setParameters()</full_name>
        <docblock line="78">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="78" description="" type="array" variable="$parameters">
            <type>array</type>
          </tag>
          <tag name="return" line="78" description="" type="\ItvisionSy\Validator\ValidatorRule">
            <type>\ItvisionSy\Validator\ValidatorRule</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parameters</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ItvisionSy\Validator" line="88" package="Default">
        <name>_validate</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::_validate()</full_name>
        <docblock line="88">
          <description>The actual validation logic of the class</description>
          <long-description></long-description>
          <tag name="param" line="88" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="88" description="TRUE if validation succeeded, string error or array of string errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ItvisionSy\Validator" line="94" package="Default">
        <name>preRules</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::preRules()</full_name>
        <docblock line="94">
          <description>Returns a ValidatorRule[] which will be validated before validating this rule</description>
          <long-description></long-description>
          <tag name="return" line="94" description="" type="\ItvisionSy\Validator\ValidatorRule|array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;">
            <type>\ItvisionSy\Validator\ValidatorRule</type>
            <type>array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ItvisionSy\Validator" line="102" package="Default">
        <name>postRules</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::postRules()</full_name>
        <docblock line="102">
          <description>Returns a ValidatorRule[] which will be validated after successfully validating this rule</description>
          <long-description></long-description>
          <tag name="return" line="102" description="" type="\ItvisionSy\Validator\ValidatorRule|array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;">
            <type>\ItvisionSy\Validator\ValidatorRule</type>
            <type>array&lt;mixed,\ItvisionSy\Validator\ValidatorRule&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="111" package="Default">
        <name>validate</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::validate()</full_name>
        <docblock line="111">
          <description>Validates a value against the rule</description>
          <long-description></long-description>
          <tag name="param" line="111" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="111" description="TRUE if validation succeeded, string or array of errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="130" package="Default">
        <name>preValidate</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::preValidate()</full_name>
        <docblock line="130">
          <description>Executes the pre validation rules and returns.</description>
          <long-description></long-description>
          <tag name="param" line="130" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="130" description="TRUE if validation succeeded, string or array of errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="146" package="Default">
        <name>postValidate</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::postValidate()</full_name>
        <docblock line="146">
          <description>Executes the post validation rules</description>
          <long-description></long-description>
          <tag name="param" line="146" description="&lt;p&gt;the value to be validated&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="146" description="TRUE if validation succeeded, string or array of errors otherwise." type="true|string|array&lt;mixed,string&gt;">
            <type>true</type>
            <type>string</type>
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="157" package="Default">
        <name>__get</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::__get()</full_name>
        <docblock line="157">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="168" package="Default">
        <name>offsetExists</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::offsetExists()</full_name>
        <docblock line="168">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="172" package="Default">
        <name>offsetGet</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::offsetGet()</full_name>
        <docblock line="172">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="176" package="Default">
        <name>offsetSet</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::offsetSet()</full_name>
        <docblock line="176">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ItvisionSy\Validator" line="180" package="Default">
        <name>offsetUnset</name>
        <full_name>\ItvisionSy\Validator\ValidatorRule::offsetUnset()</full_name>
        <docblock line="180">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\ItvisionSy\Validator\ValidatorRule</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="12" code="PPC:ERR-50015">Argument $value is missing from the Docblock of _validate</error>
      <error line="12" code="PPC:ERR-50008">No summary for method ""</error>
    </parse_markers>
    <source>eJxtzk1rwkAQBuD7/opReqih1XsVNWAKgXhRyUkIw+6EXdjshv2QSvG/dxNDodA5DS/PfGx2vewZM9iR75ETlOGmvLLmfL/WqJXAYN2asVWWMcjgQJ471YcEwLZQdKj0LztFTQkNbo8xSOvgGCUagwLOkrQmCZtuSpb+mezVdPDd35fcdts0vmJco/f/rAf6CmSEh7/pN2OQqnc2EA8koI2Gj082tyek15fURVokC1M5CtEZmM1apQO5RN2k3uD6WVaX4tTUeVUe8kvRFMe8rBa7j3k9AFAejA2AMO4HGj4FFMKR9/P1eOLB2IP9AOHSdTE=</source>
  </file>
  <package name="Default" full_name="Default"/>
  <package name="global" full_name="global"/>
  <namespace name="ItvisionSy" full_name="ItvisionSy">
    <namespace name="Validator" full_name="ItvisionSy\Validator"/>
  </namespace>
  <deprecated count="0"/>
</project>
